
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800232  00800232  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143c  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f39  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087b  00000000  00000000  00002935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000031b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000569  00000000  00000000  0000396a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	76 c1       	rjmp	.+748    	; 0x352 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 34       	cpi	r26, 0x4D	; 77
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	32 d0       	rcall	.+100    	; 0x184 <main>
 120:	5a c1       	rjmp	.+692    	; 0x3d6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	DDRF = 0x00; //set PORTF as input
 124:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFC; //turn on pull-up resistors
 126:	8c ef       	ldi	r24, 0xFC	; 252
 128:	81 bb       	out	0x11, r24	; 17
	ADCSRA = (1<< ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enable ADC and set prescaler
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 130:	08 95       	ret

00000132 <ten_bit_ADC>:

uint16_t ten_bit_ADC(uint8_t channel)
{
	uint16_t result; //store ADC value
	
	ADMUX = (ADMUX & 0xE0); // clear ADMUX and select channel
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 7e       	andi	r24, 0xE0	; 224
 13a:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0); //set to VCC
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC); //begin conversion
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF))==0) //wait for conversion to end
 14c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 150:	84 ff       	sbrs	r24, 4
 152:	fc cf       	rjmp	.-8      	; 0x14c <ten_bit_ADC+0x1a>
	{
		
	}
	
	result = ADCL; //store value and freeze ADCH register
 154:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	result |= (ADCH<<8); //store value
 158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	98 2f       	mov	r25, r24
 160:	88 27       	eor	r24, r24
	ADCSRA |= (1<<ADIF); //clear interrupt flag
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	20 81       	ld	r18, Z
 168:	20 61       	ori	r18, 0x10	; 16
 16a:	20 83       	st	Z, r18
	
	return result; // return result
 16c:	83 2b       	or	r24, r19
 16e:	08 95       	ret

00000170 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 176:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 17a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 17c:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 17e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 180:	88 b9       	out	0x08, r24	; 8
 182:	08 95       	ret

00000184 <main>:
#include "ADC.h"
#include "USART0.h"
#include "main.h"

int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	64 97       	sbiw	r28, 0x14	; 20
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
	io_init();
 198:	eb df       	rcall	.-42     	; 0x170 <io_init>
	init_ADC();
 19a:	c4 df       	rcall	.-120    	; 0x124 <init_ADC>
	Init_UART();
 19c:	cc d0       	rcall	.+408    	; 0x336 <Init_UART>
 19e:	78 94       	sei
	sei();
 1a0:	89 e0       	ldi	r24, 0x09	; 9
	uint8_t h= 2000;
	
	uint16_t value = 0;
	uint8_t locked = 1;
	
	char pass[20] = {"password"};
 1a2:	e8 e0       	ldi	r30, 0x08	; 8
 1a4:	f2 e0       	ldi	r31, 0x02	; 2
 1a6:	de 01       	movw	r26, r28
 1a8:	11 96       	adiw	r26, 0x01	; 1
 1aa:	01 90       	ld	r0, Z+
 1ac:	0d 92       	st	X+, r0
 1ae:	8a 95       	dec	r24
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x26>
 1b2:	fe 01       	movw	r30, r28
 1b4:	3a 96       	adiw	r30, 0x0a	; 10
 1b6:	8b e0       	ldi	r24, 0x0B	; 11
 1b8:	df 01       	movw	r26, r30
 1ba:	1d 92       	st	X+, r1
 1bc:	8a 95       	dec	r24
 1be:	e9 f7       	brne	.-6      	; 0x1ba <main+0x36>
 1c0:	e0 e8       	ldi	r30, 0x80	; 128
	//TCCR3B = 0b00011000;
	//TCCR3A = TCCR3A | 0x80;  	// configure for clear on match
	//TCCR3B = TCCR3B | 0x02;
	//ICR3 = 39999; //use PWM mode 14
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 6a       	ori	r24, 0xA2	; 162
 1c8:	80 83       	st	Z, r24
 1ca:	e1 e8       	ldi	r30, 0x81	; 129
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8b 61       	ori	r24, 0x1B	; 27
 1d2:	80 83       	st	Z, r24
 1d4:	87 e8       	ldi	r24, 0x87	; 135

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 1d6:	93 e1       	ldi	r25, 0x13	; 19
 1d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 1dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
 1e0:	80 e2       	ldi	r24, 0x20	; 32

	DDRB = 0x20;   //PWM Pins as Out
 1e2:	84 b9       	out	0x04, r24	; 4
 1e4:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t i = 0;
	
	uint8_t h= 2000;
	
	uint16_t value = 0;
	uint8_t locked = 1;
 1e6:	10 e0       	ldi	r17, 0x00	; 0
	io_init();
	init_ADC();
	Init_UART();
	sei();
	uint8_t n=1;
	uint8_t i = 0;
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <main+0x94>

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).

	DDRB = 0x20;   //PWM Pins as Out
	
	while(locked == 1){
 1ea:	fc 01       	movw	r30, r24
		while(pass[i]){
			if(rx_buffer[i] == pass[i])
 1ec:	ed 5c       	subi	r30, 0xCD	; 205
 1ee:	fd 4f       	sbci	r31, 0xFD	; 253
 1f0:	80 81       	ld	r24, Z
 1f2:	28 13       	cpse	r18, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0x76>
 1f6:	1f 5f       	subi	r17, 0xFF	; 255
			{
				i++;
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <main+0x7c>
			}else{
				UART_outstring("try a different code");
 1fa:	8c e1       	ldi	r24, 0x1C	; 28
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	d7 d0       	rcall	.+430    	; 0x3ae <UART_outstring>
 200:	81 2f       	mov	r24, r17
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).

	DDRB = 0x20;   //PWM Pins as Out
	
	while(locked == 1){
		while(pass[i]){
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ec 0f       	add	r30, r28
 20a:	fd 1f       	adc	r31, r29
 20c:	e8 0f       	add	r30, r24
 20e:	f9 1f       	adc	r31, r25
 210:	20 81       	ld	r18, Z
 212:	30 e0       	ldi	r19, 0x00	; 0
				i++;
			}else{
				UART_outstring("try a different code");
			}
		}
		locked = 0;
 214:	21 11       	cpse	r18, r1
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).

	DDRB = 0x20;   //PWM Pins as Out
	
	while(locked == 1){
		while(pass[i]){
 216:	e9 cf       	rjmp	.-46     	; 0x1ea <main+0x66>
 218:	31 30       	cpi	r19, 0x01	; 1

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).

	DDRB = 0x20;   //PWM Pins as Out
	
	while(locked == 1){
 21a:	91 f3       	breq	.-28     	; 0x200 <main+0x7c>
 21c:	04 c0       	rjmp	.+8      	; 0x226 <main+0xa2>
		}
		locked = 0;
	}
	while ((PINC & 0x01))
	{
		Stepper_Position('W',n);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	87 e5       	ldi	r24, 0x57	; 87
 224:	2e d0       	rcall	.+92     	; 0x282 <Stepper_Position>
 226:	30 99       	sbic	0x06, 0	; 6
				UART_outstring("try a different code");
			}
		}
		locked = 0;
	}
	while ((PINC & 0x01))
 228:	fa cf       	rjmp	.-12     	; 0x21e <main+0x9a>
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 22a:	60 ed       	ldi	r22, 0xD0	; 208
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	86 e4       	ldi	r24, 0x46	; 70
 230:	28 d0       	rcall	.+80     	; 0x282 <Stepper_Position>
 232:	80 b1       	in	r24, 0x00	; 0
	
    while (1) 
    {
	
		switch (PushButton)
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	61 f0       	breq	.+24     	; 0x252 <main+0xce>
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	99 f0       	breq	.+38     	; 0x264 <main+0xe0>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	b9 f4       	brne	.+46     	; 0x270 <main+0xec>
 242:	04 c0       	rjmp	.+8      	; 0x24c <main+0xc8>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	87 e5       	ldi	r24, 0x57	; 87
 24a:	1b d0       	rcall	.+54     	; 0x282 <Stepper_Position>
	
		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 24c:	00 99       	sbic	0x00, 0	; 0
 24e:	fa cf       	rjmp	.-12     	; 0x244 <main+0xc0>
 250:	0f c0       	rjmp	.+30     	; 0x270 <main+0xec>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	86 e4       	ldi	r24, 0x46	; 70
 258:	14 d0       	rcall	.+40     	; 0x282 <Stepper_Position>

				break;
 25a:	0a c0       	rjmp	.+20     	; 0x270 <main+0xec>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	87 e5       	ldi	r24, 0x57	; 87
 262:	0f d0       	rcall	.+30     	; 0x282 <Stepper_Position>
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 264:	30 99       	sbic	0x06, 0	; 6
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 266:	fa cf       	rjmp	.-12     	; 0x25c <main+0xd8>
 268:	60 ed       	ldi	r22, 0xD0	; 208
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	86 e4       	ldi	r24, 0x46	; 70
 26e:	09 d0       	rcall	.+18     	; 0x282 <Stepper_Position>
				break;

			}
		}
		
		PORTK = 0x00; //clear output when done
 270:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		//value = ten_bit_ADC(0); //read the channel from the Potentiometer
		//value = ((value + 900)+(value *.173)); //convert the value read to the proper value
		//OCR3A = value * 2; // set OCR3A to the value
		
		
		OCR1A = ten_bit_ADC(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	5d df       	rcall	.-326    	; 0x132 <ten_bit_ADC>
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 280:	d8 cf       	rjmp	.-80     	; 0x232 <main+0xae>

00000282 <Stepper_Position>:
		
		
		
	}
 282:	86 34       	cpi	r24, 0x46	; 70
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 284:	51 f1       	breq	.+84     	; 0x2da <Stepper_Position+0x58>
 286:	87 35       	cpi	r24, 0x57	; 87
 288:	09 f0       	breq	.+2      	; 0x28c <Stepper_Position+0xa>
 28a:	4d c0       	rjmp	.+154    	; 0x326 <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 28c:	ab 01       	movw	r20, r22
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	46 0f       	add	r20, r22
 294:	57 1f       	adc	r21, r23
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	56 95       	lsr	r21
 29c:	47 95       	ror	r20
 29e:	56 95       	lsr	r21
 2a0:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 2a8:	fc 01       	movw	r30, r24
 2aa:	ec 5f       	subi	r30, 0xFC	; 252
 2ac:	fd 4f       	sbci	r31, 0xFD	; 253
 2ae:	20 81       	ld	r18, Z
 2b0:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	ef eb       	ldi	r30, 0xBF	; 191
 2b6:	fd e5       	ldi	r31, 0x5D	; 93
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <Stepper_Position+0x36>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <Stepper_Position+0x3c>
 2be:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <Stepper_Position+0x46>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	91 05       	cpc	r25, r1
 2cc:	68 f3       	brcs	.-38     	; 0x2a8 <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	64 17       	cp	r22, r20
 2d4:	75 07       	cpc	r23, r21
 2d6:	b0 f3       	brcs	.-20     	; 0x2c4 <Stepper_Position+0x42>
 2d8:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 2da:	ab 01       	movw	r20, r22
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	46 0f       	add	r20, r22
 2e2:	57 1f       	adc	r21, r23
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	56 95       	lsr	r21
 2ea:	47 95       	ror	r20
 2ec:	56 95       	lsr	r21
 2ee:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	15 c0       	rjmp	.+42     	; 0x320 <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 2f6:	fc 01       	movw	r30, r24
 2f8:	e0 50       	subi	r30, 0x00	; 0
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	20 81       	ld	r18, Z
 2fe:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 302:	ef eb       	ldi	r30, 0xBF	; 191
 304:	fd e5       	ldi	r31, 0x5D	; 93
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Stepper_Position+0x84>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Stepper_Position+0x8a>
 30c:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	02 c0       	rjmp	.+4      	; 0x316 <Stepper_Position+0x94>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	84 30       	cpi	r24, 0x04	; 4
 318:	91 05       	cpc	r25, r1
 31a:	68 f3       	brcs	.-38     	; 0x2f6 <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 31c:	6f 5f       	subi	r22, 0xFF	; 255
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	64 17       	cp	r22, r20
 322:	75 07       	cpc	r23, r21
 324:	b0 f3       	brcs	.-20     	; 0x312 <Stepper_Position+0x90>
 326:	08 95       	ret

00000328 <UART_out>:
#include "main.h"

void UART_out(uint8_t ch)
{
	
	while((UCSR0A & (1<< UDRE0)) == 0)
 328:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 32c:	95 ff       	sbrs	r25, 5
 32e:	fc cf       	rjmp	.-8      	; 0x328 <UART_out>
	{	
	}
	UDR0 = ch;
 330:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 334:	08 95       	ret

00000336 <Init_UART>:
}


void Init_UART(void)
{
	UCSR0A = 0x00;
 336:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UBRR0H = 0x00;
 33a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = myubr;
 33e:	87 e6       	ldi	r24, 0x67	; 103
 340:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);  //initialize with the interrupt bit enabled
 344:	88 e9       	ldi	r24, 0x98	; 152
 346:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 350:	08 95       	ret

00000352 <__vector_25>:
//ISR(USART0_RX_vect)
//{
//	rx_char = UDR0;
//	}

ISR(USART0_RX_vect){
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	0b b6       	in	r0, 0x3b	; 59
 35e:	0f 92       	push	r0
 360:	8f 93       	push	r24
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	uint8_t rx_char = UDR0;
 366:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if(rx_char == 0x0D)  //if the enter button is pushed, execute code inside
 36a:	8d 30       	cpi	r24, 0x0D	; 13
 36c:	49 f4       	brne	.+18     	; 0x380 <__vector_25+0x2e>
	{
		rx_buffer[array_index] = '\0';  //end the line and reset index value to zero, and update boolean to 1
 36e:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ed 5c       	subi	r30, 0xCD	; 205
 376:	fd 4f       	sbci	r31, 0xFD	; 253
 378:	10 82       	st	Z, r1
		array_index = 0;
 37a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
 37e:	0d c0       	rjmp	.+26     	; 0x39a <__vector_25+0x48>
	}else if(rx_char == 0x0A){  //does nothing if it is the next line
 380:	8a 30       	cpi	r24, 0x0A	; 10
 382:	59 f0       	breq	.+22     	; 0x39a <__vector_25+0x48>
		
	}else{
		rx_buffer[array_index] = rx_char;  //otherwise add the current value of the UDR0 to the rx_buffer and increment the index
 384:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ed 5c       	subi	r30, 0xCD	; 205
 38c:	fd 4f       	sbci	r31, 0xFD	; 253
 38e:	80 83       	st	Z, r24
		array_index++;
 390:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
		
}
	}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	8f 91       	pop	r24
 3a0:	0f 90       	pop	r0
 3a2:	0b be       	out	0x3b, r0	; 59
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <UART_outstring>:
	
	
	void UART_outstring(char ch[])
	{
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	8c 01       	movw	r16, r24
		uint8_t i = 0;
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
		while(ch[i])
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <UART_outstring+0x10>
		{
			UART_out(ch[i]);
 3ba:	b6 df       	rcall	.-148    	; 0x328 <UART_out>
			i++;
 3bc:	cf 5f       	subi	r28, 0xFF	; 255
	
	
	void UART_outstring(char ch[])
	{
		uint8_t i = 0;
		while(ch[i])
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 0f       	add	r30, r28
 3c2:	f1 1d       	adc	r31, r1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <UART_outstring+0xc>
		{
			UART_out(ch[i]);
			i++;
		}
		UART_out(0x0D);
 3ca:	8d e0       	ldi	r24, 0x0D	; 13
 3cc:	ad df       	rcall	.-166    	; 0x328 <UART_out>
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
