
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000618  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b3  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db4  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006aa  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061f  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000452  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000389d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	34 d0       	rcall	.+104    	; 0x178 <main>
 110:	81 c2       	rjmp	.+1282   	; 0x614 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	DDRF = 0x00; //set PORTF as input
 114:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFC; //turn on pull-up resistors
 116:	8c ef       	ldi	r24, 0xFC	; 252
 118:	81 bb       	out	0x11, r24	; 17
	ADCSRA = (1<< ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enable ADC and set prescaler
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 120:	08 95       	ret

00000122 <ten_bit_ADC>:

uint16_t ten_bit_ADC(uint8_t channel)
{
	uint16_t result; //store ADC value
	
	ADMUX = (ADMUX & 0xE0); // clear ADMUX and select channel
 122:	ec e7       	ldi	r30, 0x7C	; 124
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 7e       	andi	r24, 0xE0	; 224
 12a:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0); //set to VCC
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC); //begin conversion
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF))==0) //wait for conversion to end
 13c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 140:	84 ff       	sbrs	r24, 4
 142:	fc cf       	rjmp	.-8      	; 0x13c <ten_bit_ADC+0x1a>
	{
		
	}
	
	result = ADCL; //store value and freeze ADCH register
 144:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	result |= (ADCH<<8); //store value
 148:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	98 2f       	mov	r25, r24
 150:	88 27       	eor	r24, r24
	ADCSRA |= (1<<ADIF); //clear interrupt flag
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	20 81       	ld	r18, Z
 158:	20 61       	ori	r18, 0x10	; 16
 15a:	20 83       	st	Z, r18
	
	return result; // return result
 15c:	83 2b       	or	r24, r19
 15e:	08 95       	ret

00000160 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 166:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 16a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 16c:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 16e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 170:	88 b9       	out	0x08, r24	; 8
	DDRB = 0x60;   //PWM Pins as Out
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	84 b9       	out	0x04, r24	; 4
 176:	08 95       	ret

00000178 <main>:
#include "stepper_motor.h"
#include "ADC.h"

int main(void)
{
	io_init();
 178:	f3 df       	rcall	.-26     	; 0x160 <io_init>
	init_ADC();
 17a:	cc df       	rcall	.-104    	; 0x114 <init_ADC>
 17c:	e0 e8       	ldi	r30, 0x80	; 128
	
	uint8_t h=2000;
	
	uint16_t value = 0;
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	82 6a       	ori	r24, 0xA2	; 162
 184:	80 83       	st	Z, r24
 186:	e1 e8       	ldi	r30, 0x81	; 129
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8b 61       	ori	r24, 0x1B	; 27
 18e:	80 83       	st	Z, r24
 190:	87 e8       	ldi	r24, 0x87	; 135

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 192:	93 e1       	ldi	r25, 0x13	; 19
 194:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
 19c:	8a ef       	ldi	r24, 0xFA	; 250

	
	
	OCR1A = 250;
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
	OCR1B = 250;
 1ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <main+0x42>
	
	
	while ((PINC & 0x01))
 1b2:	61 e0       	ldi	r22, 0x01	; 1
	{
		Stepper_Position('W',n);
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	87 e5       	ldi	r24, 0x57	; 87
 1b8:	58 d0       	rcall	.+176    	; 0x26a <Stepper_Position>
 1ba:	30 99       	sbic	0x06, 0	; 6
	
	OCR1A = 250;
	OCR1B = 250;
	
	
	while ((PINC & 0x01))
 1bc:	fa cf       	rjmp	.-12     	; 0x1b2 <main+0x3a>
 1be:	60 ed       	ldi	r22, 0xD0	; 208
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	86 e4       	ldi	r24, 0x46	; 70
 1c4:	52 d0       	rcall	.+164    	; 0x26a <Stepper_Position>
 1c6:	80 b1       	in	r24, 0x00	; 0
	
    while (1) 
    {
	
		switch (PushButton)
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <main+0x6e>
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	99 f0       	breq	.+38     	; 0x1f8 <main+0x80>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	b9 f4       	brne	.+46     	; 0x204 <main+0x8c>
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <main+0x68>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	87 e5       	ldi	r24, 0x57	; 87
 1de:	45 d0       	rcall	.+138    	; 0x26a <Stepper_Position>
 1e0:	00 99       	sbic	0x00, 0	; 0
	
		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 1e2:	fa cf       	rjmp	.-12     	; 0x1d8 <main+0x60>
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <main+0x8c>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	86 e4       	ldi	r24, 0x46	; 70
 1ec:	3e d0       	rcall	.+124    	; 0x26a <Stepper_Position>

				break;
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <main+0x8c>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	87 e5       	ldi	r24, 0x57	; 87
 1f6:	39 d0       	rcall	.+114    	; 0x26a <Stepper_Position>
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 1f8:	30 99       	sbic	0x06, 0	; 6
 1fa:	fa cf       	rjmp	.-12     	; 0x1f0 <main+0x78>
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 1fc:	60 ed       	ldi	r22, 0xD0	; 208
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	86 e4       	ldi	r24, 0x46	; 70
 202:	33 d0       	rcall	.+102    	; 0x26a <Stepper_Position>
				break;

			}
		}
		
		PORTK = 0x00; //clear output when done
 204:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		
		while (PINC & 0x02)
		{
			value = ten_bit_ADC(0);
 208:	15 c0       	rjmp	.+42     	; 0x234 <main+0xbc>
 20a:	80 e0       	ldi	r24, 0x00	; 0
			value = ((value*.5)+97);
 20c:	8a df       	rcall	.-236    	; 0x122 <ten_bit_ADC>
 20e:	bc 01       	movw	r22, r24
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e d1       	rcall	.+540    	; 0x432 <__floatunsisf>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	5f e3       	ldi	r21, 0x3F	; 63
 21e:	97 d1       	rcall	.+814    	; 0x54e <__mulsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	42 ec       	ldi	r20, 0xC2	; 194
 226:	52 e4       	ldi	r21, 0x42	; 66
 228:	74 d0       	rcall	.+232    	; 0x312 <__addsf3>
 22a:	d7 d0       	rcall	.+430    	; 0x3da <__fixunssfsi>
			OCR1A = value;
 22c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 230:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		PORTK = 0x00; //clear output when done
		
		while (PINC & 0x02)
 234:	31 99       	sbic	0x06, 1	; 6
 236:	e9 cf       	rjmp	.-46     	; 0x20a <main+0x92>
			OCR1A = value;
		}
		
		while (PINC & 0x08)
		{
			value = ten_bit_ADC(0);
 238:	15 c0       	rjmp	.+42     	; 0x264 <main+0xec>
 23a:	80 e0       	ldi	r24, 0x00	; 0
			value = ((value*.5)+97);
 23c:	72 df       	rcall	.-284    	; 0x122 <ten_bit_ADC>
 23e:	bc 01       	movw	r22, r24
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	f6 d0       	rcall	.+492    	; 0x432 <__floatunsisf>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	5f e3       	ldi	r21, 0x3F	; 63
 24e:	7f d1       	rcall	.+766    	; 0x54e <__mulsf3>
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	42 ec       	ldi	r20, 0xC2	; 194
 256:	52 e4       	ldi	r21, 0x42	; 66
 258:	5c d0       	rcall	.+184    	; 0x312 <__addsf3>
 25a:	bf d0       	rcall	.+382    	; 0x3da <__fixunssfsi>
 25c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
			OCR1B = value;
 260:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 264:	33 99       	sbic	0x06, 3	; 6
 266:	e9 cf       	rjmp	.-46     	; 0x23a <main+0xc2>
			value = ten_bit_ADC(0);
			value = ((value*.5)+97);
			OCR1A = value;
		}
		
		while (PINC & 0x08)
 268:	ae cf       	rjmp	.-164    	; 0x1c6 <main+0x4e>

0000026a <Stepper_Position>:
 26a:	86 34       	cpi	r24, 0x46	; 70
 26c:	51 f1       	breq	.+84     	; 0x2c2 <Stepper_Position+0x58>
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 26e:	87 35       	cpi	r24, 0x57	; 87
 270:	09 f0       	breq	.+2      	; 0x274 <Stepper_Position+0xa>
 272:	4d c0       	rjmp	.+154    	; 0x30e <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 274:	ab 01       	movw	r20, r22
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	46 0f       	add	r20, r22
 27c:	57 1f       	adc	r21, r23
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	56 95       	lsr	r21
 284:	47 95       	ror	r20
 286:	56 95       	lsr	r21
 288:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 290:	fc 01       	movw	r30, r24
 292:	ec 5f       	subi	r30, 0xFC	; 252
 294:	fd 4f       	sbci	r31, 0xFD	; 253
 296:	20 81       	ld	r18, Z
 298:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	ef eb       	ldi	r30, 0xBF	; 191
 29e:	fd e5       	ldi	r31, 0x5D	; 93
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <Stepper_Position+0x36>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <Stepper_Position+0x3c>
 2a6:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <Stepper_Position+0x46>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	91 05       	cpc	r25, r1
 2b4:	68 f3       	brcs	.-38     	; 0x290 <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	64 17       	cp	r22, r20
 2bc:	75 07       	cpc	r23, r21
 2be:	b0 f3       	brcs	.-20     	; 0x2ac <Stepper_Position+0x42>
 2c0:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 2c2:	ab 01       	movw	r20, r22
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	46 0f       	add	r20, r22
 2ca:	57 1f       	adc	r21, r23
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	56 95       	lsr	r21
 2d2:	47 95       	ror	r20
 2d4:	56 95       	lsr	r21
 2d6:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	15 c0       	rjmp	.+42     	; 0x308 <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 2de:	fc 01       	movw	r30, r24
 2e0:	e0 50       	subi	r30, 0x00	; 0
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	20 81       	ld	r18, Z
 2e6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 2ea:	ef eb       	ldi	r30, 0xBF	; 191
 2ec:	fd e5       	ldi	r31, 0x5D	; 93
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <Stepper_Position+0x84>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <Stepper_Position+0x8a>
 2f4:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <Stepper_Position+0x94>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	91 05       	cpc	r25, r1
 302:	68 f3       	brcs	.-38     	; 0x2de <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 304:	6f 5f       	subi	r22, 0xFF	; 255
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	64 17       	cp	r22, r20
 30a:	75 07       	cpc	r23, r21
 30c:	b0 f3       	brcs	.-20     	; 0x2fa <Stepper_Position+0x90>
 30e:	08 95       	ret

00000310 <__subsf3>:
 310:	50 58       	subi	r21, 0x80	; 128

00000312 <__addsf3>:
 312:	bb 27       	eor	r27, r27
 314:	aa 27       	eor	r26, r26
 316:	0e d0       	rcall	.+28     	; 0x334 <__addsf3x>
 318:	e0 c0       	rjmp	.+448    	; 0x4da <__fp_round>
 31a:	d1 d0       	rcall	.+418    	; 0x4be <__fp_pscA>
 31c:	30 f0       	brcs	.+12     	; 0x32a <__addsf3+0x18>
 31e:	d6 d0       	rcall	.+428    	; 0x4cc <__fp_pscB>
 320:	20 f0       	brcs	.+8      	; 0x32a <__addsf3+0x18>
 322:	31 f4       	brne	.+12     	; 0x330 <__addsf3+0x1e>
 324:	9f 3f       	cpi	r25, 0xFF	; 255
 326:	11 f4       	brne	.+4      	; 0x32c <__addsf3+0x1a>
 328:	1e f4       	brtc	.+6      	; 0x330 <__addsf3+0x1e>
 32a:	c6 c0       	rjmp	.+396    	; 0x4b8 <__fp_nan>
 32c:	0e f4       	brtc	.+2      	; 0x330 <__addsf3+0x1e>
 32e:	e0 95       	com	r30
 330:	e7 fb       	bst	r30, 7
 332:	bc c0       	rjmp	.+376    	; 0x4ac <__fp_inf>

00000334 <__addsf3x>:
 334:	e9 2f       	mov	r30, r25
 336:	e2 d0       	rcall	.+452    	; 0x4fc <__fp_split3>
 338:	80 f3       	brcs	.-32     	; 0x31a <__addsf3+0x8>
 33a:	ba 17       	cp	r27, r26
 33c:	62 07       	cpc	r22, r18
 33e:	73 07       	cpc	r23, r19
 340:	84 07       	cpc	r24, r20
 342:	95 07       	cpc	r25, r21
 344:	18 f0       	brcs	.+6      	; 0x34c <__addsf3x+0x18>
 346:	71 f4       	brne	.+28     	; 0x364 <__addsf3x+0x30>
 348:	9e f5       	brtc	.+102    	; 0x3b0 <__addsf3x+0x7c>
 34a:	fa c0       	rjmp	.+500    	; 0x540 <__fp_zero>
 34c:	0e f4       	brtc	.+2      	; 0x350 <__addsf3x+0x1c>
 34e:	e0 95       	com	r30
 350:	0b 2e       	mov	r0, r27
 352:	ba 2f       	mov	r27, r26
 354:	a0 2d       	mov	r26, r0
 356:	0b 01       	movw	r0, r22
 358:	b9 01       	movw	r22, r18
 35a:	90 01       	movw	r18, r0
 35c:	0c 01       	movw	r0, r24
 35e:	ca 01       	movw	r24, r20
 360:	a0 01       	movw	r20, r0
 362:	11 24       	eor	r1, r1
 364:	ff 27       	eor	r31, r31
 366:	59 1b       	sub	r21, r25
 368:	99 f0       	breq	.+38     	; 0x390 <__addsf3x+0x5c>
 36a:	59 3f       	cpi	r21, 0xF9	; 249
 36c:	50 f4       	brcc	.+20     	; 0x382 <__addsf3x+0x4e>
 36e:	50 3e       	cpi	r21, 0xE0	; 224
 370:	68 f1       	brcs	.+90     	; 0x3cc <__addsf3x+0x98>
 372:	1a 16       	cp	r1, r26
 374:	f0 40       	sbci	r31, 0x00	; 0
 376:	a2 2f       	mov	r26, r18
 378:	23 2f       	mov	r18, r19
 37a:	34 2f       	mov	r19, r20
 37c:	44 27       	eor	r20, r20
 37e:	58 5f       	subi	r21, 0xF8	; 248
 380:	f3 cf       	rjmp	.-26     	; 0x368 <__addsf3x+0x34>
 382:	46 95       	lsr	r20
 384:	37 95       	ror	r19
 386:	27 95       	ror	r18
 388:	a7 95       	ror	r26
 38a:	f0 40       	sbci	r31, 0x00	; 0
 38c:	53 95       	inc	r21
 38e:	c9 f7       	brne	.-14     	; 0x382 <__addsf3x+0x4e>
 390:	7e f4       	brtc	.+30     	; 0x3b0 <__addsf3x+0x7c>
 392:	1f 16       	cp	r1, r31
 394:	ba 0b       	sbc	r27, r26
 396:	62 0b       	sbc	r22, r18
 398:	73 0b       	sbc	r23, r19
 39a:	84 0b       	sbc	r24, r20
 39c:	ba f0       	brmi	.+46     	; 0x3cc <__addsf3x+0x98>
 39e:	91 50       	subi	r25, 0x01	; 1
 3a0:	a1 f0       	breq	.+40     	; 0x3ca <__addsf3x+0x96>
 3a2:	ff 0f       	add	r31, r31
 3a4:	bb 1f       	adc	r27, r27
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	c2 f7       	brpl	.-16     	; 0x39e <__addsf3x+0x6a>
 3ae:	0e c0       	rjmp	.+28     	; 0x3cc <__addsf3x+0x98>
 3b0:	ba 0f       	add	r27, r26
 3b2:	62 1f       	adc	r22, r18
 3b4:	73 1f       	adc	r23, r19
 3b6:	84 1f       	adc	r24, r20
 3b8:	48 f4       	brcc	.+18     	; 0x3cc <__addsf3x+0x98>
 3ba:	87 95       	ror	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f7 95       	ror	r31
 3c4:	9e 3f       	cpi	r25, 0xFE	; 254
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <__addsf3x+0x96>
 3c8:	b3 cf       	rjmp	.-154    	; 0x330 <__addsf3+0x1e>
 3ca:	93 95       	inc	r25
 3cc:	88 0f       	add	r24, r24
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__addsf3x+0x9e>
 3d0:	99 27       	eor	r25, r25
 3d2:	ee 0f       	add	r30, r30
 3d4:	97 95       	ror	r25
 3d6:	87 95       	ror	r24
 3d8:	08 95       	ret

000003da <__fixunssfsi>:
 3da:	98 d0       	rcall	.+304    	; 0x50c <__fp_splitA>
 3dc:	88 f0       	brcs	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
 3de:	9f 57       	subi	r25, 0x7F	; 127
 3e0:	90 f0       	brcs	.+36     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e2:	b9 2f       	mov	r27, r25
 3e4:	99 27       	eor	r25, r25
 3e6:	b7 51       	subi	r27, 0x17	; 23
 3e8:	a0 f0       	brcs	.+40     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ea:	d1 f0       	breq	.+52     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	88 1f       	adc	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	1a f0       	brmi	.+6      	; 0x3fc <__fixunssfsi+0x22>
 3f6:	ba 95       	dec	r27
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <__fixunssfsi+0x12>
 3fa:	12 c0       	rjmp	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fc:	b1 30       	cpi	r27, 0x01	; 1
 3fe:	81 f0       	breq	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	9f d0       	rcall	.+318    	; 0x540 <__fp_zero>
 402:	b1 e0       	ldi	r27, 0x01	; 1
 404:	08 95       	ret
 406:	9c c0       	rjmp	.+312    	; 0x540 <__fp_zero>
 408:	67 2f       	mov	r22, r23
 40a:	78 2f       	mov	r23, r24
 40c:	88 27       	eor	r24, r24
 40e:	b8 5f       	subi	r27, 0xF8	; 248
 410:	39 f0       	breq	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 412:	b9 3f       	cpi	r27, 0xF9	; 249
 414:	cc f3       	brlt	.-14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 416:	86 95       	lsr	r24
 418:	77 95       	ror	r23
 41a:	67 95       	ror	r22
 41c:	b3 95       	inc	r27
 41e:	d9 f7       	brne	.-10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 420:	3e f4       	brtc	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	90 95       	com	r25
 424:	80 95       	com	r24
 426:	70 95       	com	r23
 428:	61 95       	neg	r22
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	8f 4f       	sbci	r24, 0xFF	; 255
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	08 95       	ret

00000432 <__floatunsisf>:
 432:	e8 94       	clt
 434:	09 c0       	rjmp	.+18     	; 0x448 <__floatsisf+0x12>

00000436 <__floatsisf>:
 436:	97 fb       	bst	r25, 7
 438:	3e f4       	brtc	.+14     	; 0x448 <__floatsisf+0x12>
 43a:	90 95       	com	r25
 43c:	80 95       	com	r24
 43e:	70 95       	com	r23
 440:	61 95       	neg	r22
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	99 23       	and	r25, r25
 44a:	a9 f0       	breq	.+42     	; 0x476 <__floatsisf+0x40>
 44c:	f9 2f       	mov	r31, r25
 44e:	96 e9       	ldi	r25, 0x96	; 150
 450:	bb 27       	eor	r27, r27
 452:	93 95       	inc	r25
 454:	f6 95       	lsr	r31
 456:	87 95       	ror	r24
 458:	77 95       	ror	r23
 45a:	67 95       	ror	r22
 45c:	b7 95       	ror	r27
 45e:	f1 11       	cpse	r31, r1
 460:	f8 cf       	rjmp	.-16     	; 0x452 <__floatsisf+0x1c>
 462:	fa f4       	brpl	.+62     	; 0x4a2 <__floatsisf+0x6c>
 464:	bb 0f       	add	r27, r27
 466:	11 f4       	brne	.+4      	; 0x46c <__floatsisf+0x36>
 468:	60 ff       	sbrs	r22, 0
 46a:	1b c0       	rjmp	.+54     	; 0x4a2 <__floatsisf+0x6c>
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	16 c0       	rjmp	.+44     	; 0x4a2 <__floatsisf+0x6c>
 476:	88 23       	and	r24, r24
 478:	11 f0       	breq	.+4      	; 0x47e <__floatsisf+0x48>
 47a:	96 e9       	ldi	r25, 0x96	; 150
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <__floatsisf+0x6a>
 47e:	77 23       	and	r23, r23
 480:	21 f0       	breq	.+8      	; 0x48a <__floatsisf+0x54>
 482:	9e e8       	ldi	r25, 0x8E	; 142
 484:	87 2f       	mov	r24, r23
 486:	76 2f       	mov	r23, r22
 488:	05 c0       	rjmp	.+10     	; 0x494 <__floatsisf+0x5e>
 48a:	66 23       	and	r22, r22
 48c:	71 f0       	breq	.+28     	; 0x4aa <__floatsisf+0x74>
 48e:	96 e8       	ldi	r25, 0x86	; 134
 490:	86 2f       	mov	r24, r22
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	2a f0       	brmi	.+10     	; 0x4a2 <__floatsisf+0x6c>
 498:	9a 95       	dec	r25
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	da f7       	brpl	.-10     	; 0x498 <__floatsisf+0x62>
 4a2:	88 0f       	add	r24, r24
 4a4:	96 95       	lsr	r25
 4a6:	87 95       	ror	r24
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <__fp_inf>:
 4ac:	97 f9       	bld	r25, 7
 4ae:	9f 67       	ori	r25, 0x7F	; 127
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <__fp_nan>:
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	08 95       	ret

000004be <__fp_pscA>:
 4be:	00 24       	eor	r0, r0
 4c0:	0a 94       	dec	r0
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	09 06       	cpc	r0, r25
 4ca:	08 95       	ret

000004cc <__fp_pscB>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	05 06       	cpc	r0, r21
 4d8:	08 95       	ret

000004da <__fp_round>:
 4da:	09 2e       	mov	r0, r25
 4dc:	03 94       	inc	r0
 4de:	00 0c       	add	r0, r0
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__fp_round+0xc>
 4e2:	88 23       	and	r24, r24
 4e4:	52 f0       	brmi	.+20     	; 0x4fa <__fp_round+0x20>
 4e6:	bb 0f       	add	r27, r27
 4e8:	40 f4       	brcc	.+16     	; 0x4fa <__fp_round+0x20>
 4ea:	bf 2b       	or	r27, r31
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__fp_round+0x18>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <__fp_round+0x20>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__fp_split3>:
 4fc:	57 fd       	sbrc	r21, 7
 4fe:	90 58       	subi	r25, 0x80	; 128
 500:	44 0f       	add	r20, r20
 502:	55 1f       	adc	r21, r21
 504:	59 f0       	breq	.+22     	; 0x51c <__fp_splitA+0x10>
 506:	5f 3f       	cpi	r21, 0xFF	; 255
 508:	71 f0       	breq	.+28     	; 0x526 <__fp_splitA+0x1a>
 50a:	47 95       	ror	r20

0000050c <__fp_splitA>:
 50c:	88 0f       	add	r24, r24
 50e:	97 fb       	bst	r25, 7
 510:	99 1f       	adc	r25, r25
 512:	61 f0       	breq	.+24     	; 0x52c <__fp_splitA+0x20>
 514:	9f 3f       	cpi	r25, 0xFF	; 255
 516:	79 f0       	breq	.+30     	; 0x536 <__fp_splitA+0x2a>
 518:	87 95       	ror	r24
 51a:	08 95       	ret
 51c:	12 16       	cp	r1, r18
 51e:	13 06       	cpc	r1, r19
 520:	14 06       	cpc	r1, r20
 522:	55 1f       	adc	r21, r21
 524:	f2 cf       	rjmp	.-28     	; 0x50a <__fp_split3+0xe>
 526:	46 95       	lsr	r20
 528:	f1 df       	rcall	.-30     	; 0x50c <__fp_splitA>
 52a:	08 c0       	rjmp	.+16     	; 0x53c <__fp_splitA+0x30>
 52c:	16 16       	cp	r1, r22
 52e:	17 06       	cpc	r1, r23
 530:	18 06       	cpc	r1, r24
 532:	99 1f       	adc	r25, r25
 534:	f1 cf       	rjmp	.-30     	; 0x518 <__fp_splitA+0xc>
 536:	86 95       	lsr	r24
 538:	71 05       	cpc	r23, r1
 53a:	61 05       	cpc	r22, r1
 53c:	08 94       	sec
 53e:	08 95       	ret

00000540 <__fp_zero>:
 540:	e8 94       	clt

00000542 <__fp_szero>:
 542:	bb 27       	eor	r27, r27
 544:	66 27       	eor	r22, r22
 546:	77 27       	eor	r23, r23
 548:	cb 01       	movw	r24, r22
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret

0000054e <__mulsf3>:
 54e:	0b d0       	rcall	.+22     	; 0x566 <__mulsf3x>
 550:	c4 cf       	rjmp	.-120    	; 0x4da <__fp_round>
 552:	b5 df       	rcall	.-150    	; 0x4be <__fp_pscA>
 554:	28 f0       	brcs	.+10     	; 0x560 <__mulsf3+0x12>
 556:	ba df       	rcall	.-140    	; 0x4cc <__fp_pscB>
 558:	18 f0       	brcs	.+6      	; 0x560 <__mulsf3+0x12>
 55a:	95 23       	and	r25, r21
 55c:	09 f0       	breq	.+2      	; 0x560 <__mulsf3+0x12>
 55e:	a6 cf       	rjmp	.-180    	; 0x4ac <__fp_inf>
 560:	ab cf       	rjmp	.-170    	; 0x4b8 <__fp_nan>
 562:	11 24       	eor	r1, r1
 564:	ee cf       	rjmp	.-36     	; 0x542 <__fp_szero>

00000566 <__mulsf3x>:
 566:	ca df       	rcall	.-108    	; 0x4fc <__fp_split3>
 568:	a0 f3       	brcs	.-24     	; 0x552 <__mulsf3+0x4>

0000056a <__mulsf3_pse>:
 56a:	95 9f       	mul	r25, r21
 56c:	d1 f3       	breq	.-12     	; 0x562 <__mulsf3+0x14>
 56e:	95 0f       	add	r25, r21
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	55 1f       	adc	r21, r21
 574:	62 9f       	mul	r22, r18
 576:	f0 01       	movw	r30, r0
 578:	72 9f       	mul	r23, r18
 57a:	bb 27       	eor	r27, r27
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	63 9f       	mul	r22, r19
 582:	aa 27       	eor	r26, r26
 584:	f0 0d       	add	r31, r0
 586:	b1 1d       	adc	r27, r1
 588:	aa 1f       	adc	r26, r26
 58a:	64 9f       	mul	r22, r20
 58c:	66 27       	eor	r22, r22
 58e:	b0 0d       	add	r27, r0
 590:	a1 1d       	adc	r26, r1
 592:	66 1f       	adc	r22, r22
 594:	82 9f       	mul	r24, r18
 596:	22 27       	eor	r18, r18
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	73 9f       	mul	r23, r19
 5a0:	b0 0d       	add	r27, r0
 5a2:	a1 1d       	adc	r26, r1
 5a4:	62 1f       	adc	r22, r18
 5a6:	83 9f       	mul	r24, r19
 5a8:	a0 0d       	add	r26, r0
 5aa:	61 1d       	adc	r22, r1
 5ac:	22 1f       	adc	r18, r18
 5ae:	74 9f       	mul	r23, r20
 5b0:	33 27       	eor	r19, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	23 1f       	adc	r18, r19
 5b8:	84 9f       	mul	r24, r20
 5ba:	60 0d       	add	r22, r0
 5bc:	21 1d       	adc	r18, r1
 5be:	82 2f       	mov	r24, r18
 5c0:	76 2f       	mov	r23, r22
 5c2:	6a 2f       	mov	r22, r26
 5c4:	11 24       	eor	r1, r1
 5c6:	9f 57       	subi	r25, 0x7F	; 127
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	8a f0       	brmi	.+34     	; 0x5ee <__mulsf3_pse+0x84>
 5cc:	e1 f0       	breq	.+56     	; 0x606 <__mulsf3_pse+0x9c>
 5ce:	88 23       	and	r24, r24
 5d0:	4a f0       	brmi	.+18     	; 0x5e4 <__mulsf3_pse+0x7a>
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	bb 1f       	adc	r27, r27
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__mulsf3_pse+0x64>
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	51 05       	cpc	r21, r1
 5e8:	70 f0       	brcs	.+28     	; 0x606 <__mulsf3_pse+0x9c>
 5ea:	60 cf       	rjmp	.-320    	; 0x4ac <__fp_inf>
 5ec:	aa cf       	rjmp	.-172    	; 0x542 <__fp_szero>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	ec f3       	brlt	.-6      	; 0x5ec <__mulsf3_pse+0x82>
 5f2:	98 3e       	cpi	r25, 0xE8	; 232
 5f4:	dc f3       	brlt	.-10     	; 0x5ec <__mulsf3_pse+0x82>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	e7 95       	ror	r30
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	c1 f7       	brne	.-16     	; 0x5f6 <__mulsf3_pse+0x8c>
 606:	fe 2b       	or	r31, r30
 608:	88 0f       	add	r24, r24
 60a:	91 1d       	adc	r25, r1
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
