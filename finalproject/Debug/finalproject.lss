
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  0000076c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800238  00800238  00000838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001437  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f09  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000870  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00003508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fe  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	ba c1       	rjmp	.+884    	; 0x3da <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 35       	cpi	r26, 0x54	; 84
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	35 d0       	rcall	.+106    	; 0x18a <main>
 120:	23 c3       	rjmp	.+1606   	; 0x768 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	DDRF = 0x00; //set PORTF as input
 124:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFC; //turn on pull-up resistors
 126:	8c ef       	ldi	r24, 0xFC	; 252
 128:	81 bb       	out	0x11, r24	; 17
	ADCSRA = (1<< ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enable ADC and set prescaler
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 130:	08 95       	ret

00000132 <ten_bit_ADC>:

uint16_t ten_bit_ADC(uint8_t channel)
{
	uint16_t result; //store ADC value
	
	ADMUX = (ADMUX & 0xE0) | channel; // clear ADMUX and select channel
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	90 7e       	andi	r25, 0xE0	; 224
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0); //set to VCC
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC); //begin conversion
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF))==0) //wait for conversion to end
 14e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <ten_bit_ADC+0x1c>
	{
		
	}
	
	result = ADCL; //store value and freeze ADCH register
 156:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	result |= (ADCH<<8); //store value
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	98 2f       	mov	r25, r24
 162:	88 27       	eor	r24, r24
	ADCSRA |= (1<<ADIF); //clear interrupt flag
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	20 81       	ld	r18, Z
 16a:	20 61       	ori	r18, 0x10	; 16
 16c:	20 83       	st	Z, r18
	
	return result; // return result
 16e:	83 2b       	or	r24, r19
 170:	08 95       	ret

00000172 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 178:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 17c:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 17e:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 180:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 182:	88 b9       	out	0x08, r24	; 8
	DDRB = 0x60;   //PWM Pins as Out
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	84 b9       	out	0x04, r24	; 4
 188:	08 95       	ret

0000018a <main>:
#include "main.h"

void io_init(void);

int main(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	64 97       	sbiw	r28, 0x14	; 20
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
	io_init();
 19e:	e9 df       	rcall	.-46     	; 0x172 <io_init>
	init_ADC();
 1a0:	c1 df       	rcall	.-126    	; 0x124 <init_ADC>
	Init_UART();
 1a2:	0d d1       	rcall	.+538    	; 0x3be <Init_UART>
 1a4:	78 94       	sei
	sei();
 1a6:	89 e0       	ldi	r24, 0x09	; 9
	
	uint16_t value = 0;
	uint16_t value_two = 0;
	uint8_t locked = 1;
	
	char pass[20] = {"password"};
 1a8:	e8 e0       	ldi	r30, 0x08	; 8
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x26>
 1b8:	fe 01       	movw	r30, r28
 1ba:	3a 96       	adiw	r30, 0x0a	; 10
 1bc:	8b e0       	ldi	r24, 0x0B	; 11
 1be:	df 01       	movw	r26, r30
 1c0:	1d 92       	st	X+, r1
 1c2:	8a 95       	dec	r24
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <main+0x36>
 1c6:	e0 e8       	ldi	r30, 0x80	; 128
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 6a       	ori	r24, 0xA2	; 162
 1ce:	80 83       	st	Z, r24
 1d0:	e1 e8       	ldi	r30, 0x81	; 129
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8b 61       	ori	r24, 0x1B	; 27
 1d8:	80 83       	st	Z, r24
 1da:	87 e8       	ldi	r24, 0x87	; 135

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 1dc:	93 e1       	ldi	r25, 0x13	; 19
 1de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 1e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
 1e6:	8a ef       	ldi	r24, 0xFA	; 250
	
	OCR1A = 250;
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1f2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
	OCR1B = 250;
 1f6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 1fa:	91 e0       	ldi	r25, 0x01	; 1
	
	uint8_t h= 2000;
	
	uint16_t value = 0;
	uint16_t value_two = 0;
	uint8_t locked = 1;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
	io_init();
	init_ADC();
	Init_UART();
	sei();
	uint8_t n=1;
	uint8_t i = 0;
 1fe:	23 c0       	rjmp	.+70     	; 0x246 <main+0xbc>
	
	OCR1A = 250;
	OCR1B = 250;
	
	
	while(locked == 1){
 200:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <LCD_update>
		if(LCD_update == 1){
 204:	21 30       	cpi	r18, 0x01	; 1
 206:	f9 f4       	brne	.+62     	; 0x246 <main+0xbc>
 208:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <LCD_update>
			LCD_update = 0;
 20c:	11 c0       	rjmp	.+34     	; 0x230 <main+0xa6>
		
		while(pass[i]){
 20e:	f9 01       	movw	r30, r18
			if(rx_buffer[i] == pass[i])
 210:	e7 5c       	subi	r30, 0xC7	; 199
 212:	fd 4f       	sbci	r31, 0xFD	; 253
 214:	20 81       	ld	r18, Z
 216:	42 13       	cpse	r20, r18
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x92>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
			{
				i++;
 21c:	e1 e0       	ldi	r30, 0x01	; 1
			}
		if (!pass[i]){
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e8 0f       	add	r30, r24
 226:	f1 1d       	adc	r31, r1
 228:	20 81       	ld	r18, Z
 22a:	21 11       	cpse	r18, r1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <main+0xa6>
 22e:	90 e0       	ldi	r25, 0x00	; 0
					locked = 0;
 230:	28 2f       	mov	r18, r24
	
	while(locked == 1){
		if(LCD_update == 1){
			LCD_update = 0;
		
		while(pass[i]){
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e2 0f       	add	r30, r18
 23e:	f3 1f       	adc	r31, r19
 240:	40 81       	ld	r20, Z
 242:	41 11       	cpse	r20, r1
 244:	e4 cf       	rjmp	.-56     	; 0x20e <main+0x84>
 246:	91 30       	cpi	r25, 0x01	; 1
	
	OCR1A = 250;
	OCR1B = 250;
	
	
	while(locked == 1){
 248:	d9 f2       	breq	.-74     	; 0x200 <main+0x76>
					locked = 0;
		}
		}
		}
	}
	UART_outstring("Configuration mode enabled");
 24a:	8c e1       	ldi	r24, 0x1C	; 28
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	f6 d0       	rcall	.+492    	; 0x43c <UART_outstring>
 250:	04 c0       	rjmp	.+8      	; 0x25a <main+0xd0>
	
	while ((PINC & 0x01))
	{
		Stepper_Position('W',n);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	87 e5       	ldi	r24, 0x57	; 87
 258:	58 d0       	rcall	.+176    	; 0x30a <Stepper_Position>
 25a:	30 99       	sbic	0x06, 0	; 6
		}
		}
	}
	UART_outstring("Configuration mode enabled");
	
	while ((PINC & 0x01))
 25c:	fa cf       	rjmp	.-12     	; 0x252 <main+0xc8>
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 25e:	60 ed       	ldi	r22, 0xD0	; 208
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	86 e4       	ldi	r24, 0x46	; 70
 264:	52 d0       	rcall	.+164    	; 0x30a <Stepper_Position>
 266:	80 b1       	in	r24, 0x00	; 0
	
    while (1) 
    {
	
		switch (PushButton)
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	61 f0       	breq	.+24     	; 0x286 <main+0xfc>
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	99 f0       	breq	.+38     	; 0x298 <main+0x10e>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	b9 f4       	brne	.+46     	; 0x2a4 <main+0x11a>
 276:	04 c0       	rjmp	.+8      	; 0x280 <main+0xf6>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	87 e5       	ldi	r24, 0x57	; 87
 27e:	45 d0       	rcall	.+138    	; 0x30a <Stepper_Position>
	
		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 280:	00 99       	sbic	0x00, 0	; 0
 282:	fa cf       	rjmp	.-12     	; 0x278 <main+0xee>
 284:	0f c0       	rjmp	.+30     	; 0x2a4 <main+0x11a>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	86 e4       	ldi	r24, 0x46	; 70
 28c:	3e d0       	rcall	.+124    	; 0x30a <Stepper_Position>

				break;
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <main+0x11a>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	87 e5       	ldi	r24, 0x57	; 87
 296:	39 d0       	rcall	.+114    	; 0x30a <Stepper_Position>
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 298:	30 99       	sbic	0x06, 0	; 6
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 29a:	fa cf       	rjmp	.-12     	; 0x290 <main+0x106>
 29c:	60 ed       	ldi	r22, 0xD0	; 208
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	86 e4       	ldi	r24, 0x46	; 70
				break;

			}
		}
		
		PORTK = 0x00; //clear output when done
 2a2:	33 d0       	rcall	.+102    	; 0x30a <Stepper_Position>
 2a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		
		while (PINC & 0x02)
		{
			value = ten_bit_ADC(0);
 2a8:	15 c0       	rjmp	.+42     	; 0x2d4 <main+0x14a>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
			value = ((value*.5)+97);
 2ac:	42 df       	rcall	.-380    	; 0x132 <ten_bit_ADC>
 2ae:	bc 01       	movw	r22, r24
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	68 d1       	rcall	.+720    	; 0x586 <__floatunsisf>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	5f e3       	ldi	r21, 0x3F	; 63
 2be:	f1 d1       	rcall	.+994    	; 0x6a2 <__mulsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	42 ec       	ldi	r20, 0xC2	; 194
 2c6:	52 e4       	ldi	r21, 0x42	; 66
 2c8:	ce d0       	rcall	.+412    	; 0x466 <__addsf3>
 2ca:	31 d1       	rcall	.+610    	; 0x52e <__fixunssfsi>
			OCR1A = value;
 2cc:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2d0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			}
		}
		
		PORTK = 0x00; //clear output when done
		
		while (PINC & 0x02)
 2d4:	31 99       	sbic	0x06, 1	; 6
 2d6:	e9 cf       	rjmp	.-46     	; 0x2aa <main+0x120>
			OCR1A = value;
		}
		
		while (PINC & 0x08)
		{
			value = ten_bit_ADC(1);
 2d8:	15 c0       	rjmp	.+42     	; 0x304 <main+0x17a>
			value = ((value*.5)+97);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	2a df       	rcall	.-428    	; 0x132 <ten_bit_ADC>
 2de:	bc 01       	movw	r22, r24
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	50 d1       	rcall	.+672    	; 0x586 <__floatunsisf>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	d9 d1       	rcall	.+946    	; 0x6a2 <__mulsf3>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	42 ec       	ldi	r20, 0xC2	; 194
 2f6:	52 e4       	ldi	r21, 0x42	; 66
 2f8:	b6 d0       	rcall	.+364    	; 0x466 <__addsf3>
 2fa:	19 d1       	rcall	.+562    	; 0x52e <__fixunssfsi>
 2fc:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
			OCR1B = value;
 300:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 304:	33 99       	sbic	0x06, 3	; 6
 306:	e9 cf       	rjmp	.-46     	; 0x2da <main+0x150>
			value = ten_bit_ADC(0);
			value = ((value*.5)+97);
			OCR1A = value;
		}
		
		while (PINC & 0x08)
 308:	ae cf       	rjmp	.-164    	; 0x266 <main+0xdc>

0000030a <Stepper_Position>:
 30a:	86 34       	cpi	r24, 0x46	; 70
 30c:	51 f1       	breq	.+84     	; 0x362 <Stepper_Position+0x58>
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 30e:	87 35       	cpi	r24, 0x57	; 87
 310:	09 f0       	breq	.+2      	; 0x314 <Stepper_Position+0xa>
 312:	4d c0       	rjmp	.+154    	; 0x3ae <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 314:	ab 01       	movw	r20, r22
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	46 0f       	add	r20, r22
 31c:	57 1f       	adc	r21, r23
 31e:	44 0f       	add	r20, r20
 320:	55 1f       	adc	r21, r21
 322:	56 95       	lsr	r21
 324:	47 95       	ror	r20
 326:	56 95       	lsr	r21
 328:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	15 c0       	rjmp	.+42     	; 0x35a <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 330:	fc 01       	movw	r30, r24
 332:	ec 5f       	subi	r30, 0xFC	; 252
 334:	fd 4f       	sbci	r31, 0xFD	; 253
 336:	20 81       	ld	r18, Z
 338:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	ef eb       	ldi	r30, 0xBF	; 191
 33e:	fd e5       	ldi	r31, 0x5D	; 93
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <Stepper_Position+0x36>
 344:	00 c0       	rjmp	.+0      	; 0x346 <Stepper_Position+0x3c>
 346:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	02 c0       	rjmp	.+4      	; 0x350 <Stepper_Position+0x46>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	91 05       	cpc	r25, r1
 354:	68 f3       	brcs	.-38     	; 0x330 <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 356:	6f 5f       	subi	r22, 0xFF	; 255
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	64 17       	cp	r22, r20
 35c:	75 07       	cpc	r23, r21
 35e:	b0 f3       	brcs	.-20     	; 0x34c <Stepper_Position+0x42>
 360:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 362:	ab 01       	movw	r20, r22
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	46 0f       	add	r20, r22
 36a:	57 1f       	adc	r21, r23
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	56 95       	lsr	r21
 376:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	15 c0       	rjmp	.+42     	; 0x3a8 <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 37e:	fc 01       	movw	r30, r24
 380:	e0 50       	subi	r30, 0x00	; 0
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	20 81       	ld	r18, Z
 386:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 38a:	ef eb       	ldi	r30, 0xBF	; 191
 38c:	fd e5       	ldi	r31, 0x5D	; 93
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <Stepper_Position+0x84>
 392:	00 c0       	rjmp	.+0      	; 0x394 <Stepper_Position+0x8a>
 394:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	02 c0       	rjmp	.+4      	; 0x39e <Stepper_Position+0x94>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	91 05       	cpc	r25, r1
 3a2:	68 f3       	brcs	.-38     	; 0x37e <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	64 17       	cp	r22, r20
 3aa:	75 07       	cpc	r23, r21
 3ac:	b0 f3       	brcs	.-20     	; 0x39a <Stepper_Position+0x90>
 3ae:	08 95       	ret

000003b0 <UART_out>:
#include "main.h"

void UART_out(uint8_t ch)
{
	
	while((UCSR0A & (1<< UDRE0)) == 0)
 3b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3b4:	95 ff       	sbrs	r25, 5
 3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <UART_out>
	{	
	}
	UDR0 = ch;
 3b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3bc:	08 95       	ret

000003be <Init_UART>:
}


void Init_UART(void)
{
	UCSR0A = 0x00;
 3be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UBRR0H = 0x00;
 3c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = myubr;
 3c6:	87 e6       	ldi	r24, 0x67	; 103
 3c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);  //initialize with the interrupt bit enabled
 3cc:	88 e9       	ldi	r24, 0x98	; 152
 3ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 3d8:	08 95       	ret

000003da <__vector_25>:
//ISR(USART0_RX_vect)
//{
//	rx_char = UDR0;
//	}

ISR(USART0_RX_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	0f 92       	push	r0
 3e8:	8f 93       	push	r24
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	uint8_t rx_char = UDR0;
 3ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if(rx_char == 0x0D)  //if the enter button is pushed, execute code inside
 3f2:	8d 30       	cpi	r24, 0x0D	; 13
 3f4:	61 f4       	brne	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		rx_buffer[array_index] = '\0';  //end the line and reset index value to zero, and update boolean to 1
 3f6:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <__data_end>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	e7 5c       	subi	r30, 0xC7	; 199
 3fe:	fd 4f       	sbci	r31, 0xFD	; 253
 400:	10 82       	st	Z, r1
		array_index = 0;
 402:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <__data_end>
		LCD_update = 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <LCD_update>
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	}else if(rx_char == 0x0A){  //does nothing if it is the next line
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	59 f0       	breq	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		
	}else{
		rx_buffer[array_index] = rx_char;  //otherwise add the current value of the UDR0 to the rx_buffer and increment the index
 412:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <__data_end>
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	e7 5c       	subi	r30, 0xC7	; 199
 41a:	fd 4f       	sbci	r31, 0xFD	; 253
 41c:	80 83       	st	Z, r24
		array_index++;
 41e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
		
}
	}
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0b be       	out	0x3b, r0	; 59
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <UART_outstring>:
	
	
	void UART_outstring(char ch[])
	{
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	8c 01       	movw	r16, r24
		uint8_t i = 0;
 444:	c0 e0       	ldi	r28, 0x00	; 0
		while(ch[i])
 446:	02 c0       	rjmp	.+4      	; 0x44c <UART_outstring+0x10>
		{
			UART_out(ch[i]);
 448:	b3 df       	rcall	.-154    	; 0x3b0 <UART_out>
			i++;
 44a:	cf 5f       	subi	r28, 0xFF	; 255
	
	
	void UART_outstring(char ch[])
	{
		uint8_t i = 0;
		while(ch[i])
 44c:	f8 01       	movw	r30, r16
 44e:	ec 0f       	add	r30, r28
 450:	f1 1d       	adc	r31, r1
 452:	80 81       	ld	r24, Z
 454:	81 11       	cpse	r24, r1
 456:	f8 cf       	rjmp	.-16     	; 0x448 <UART_outstring+0xc>
		{
			UART_out(ch[i]);
			i++;
		}
		UART_out(0x0D);
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	aa df       	rcall	.-172    	; 0x3b0 <UART_out>
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <__subsf3>:
 464:	50 58       	subi	r21, 0x80	; 128

00000466 <__addsf3>:
 466:	bb 27       	eor	r27, r27
 468:	aa 27       	eor	r26, r26
 46a:	0e d0       	rcall	.+28     	; 0x488 <__addsf3x>
 46c:	e0 c0       	rjmp	.+448    	; 0x62e <__fp_round>
 46e:	d1 d0       	rcall	.+418    	; 0x612 <__fp_pscA>
 470:	30 f0       	brcs	.+12     	; 0x47e <__addsf3+0x18>
 472:	d6 d0       	rcall	.+428    	; 0x620 <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__addsf3+0x18>
 476:	31 f4       	brne	.+12     	; 0x484 <__addsf3+0x1e>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	11 f4       	brne	.+4      	; 0x480 <__addsf3+0x1a>
 47c:	1e f4       	brtc	.+6      	; 0x484 <__addsf3+0x1e>
 47e:	c6 c0       	rjmp	.+396    	; 0x60c <__fp_nan>
 480:	0e f4       	brtc	.+2      	; 0x484 <__addsf3+0x1e>
 482:	e0 95       	com	r30
 484:	e7 fb       	bst	r30, 7
 486:	bc c0       	rjmp	.+376    	; 0x600 <__fp_inf>

00000488 <__addsf3x>:
 488:	e9 2f       	mov	r30, r25
 48a:	e2 d0       	rcall	.+452    	; 0x650 <__fp_split3>
 48c:	80 f3       	brcs	.-32     	; 0x46e <__addsf3+0x8>
 48e:	ba 17       	cp	r27, r26
 490:	62 07       	cpc	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	95 07       	cpc	r25, r21
 498:	18 f0       	brcs	.+6      	; 0x4a0 <__addsf3x+0x18>
 49a:	71 f4       	brne	.+28     	; 0x4b8 <__addsf3x+0x30>
 49c:	9e f5       	brtc	.+102    	; 0x504 <__addsf3x+0x7c>
 49e:	fa c0       	rjmp	.+500    	; 0x694 <__fp_zero>
 4a0:	0e f4       	brtc	.+2      	; 0x4a4 <__addsf3x+0x1c>
 4a2:	e0 95       	com	r30
 4a4:	0b 2e       	mov	r0, r27
 4a6:	ba 2f       	mov	r27, r26
 4a8:	a0 2d       	mov	r26, r0
 4aa:	0b 01       	movw	r0, r22
 4ac:	b9 01       	movw	r22, r18
 4ae:	90 01       	movw	r18, r0
 4b0:	0c 01       	movw	r0, r24
 4b2:	ca 01       	movw	r24, r20
 4b4:	a0 01       	movw	r20, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	ff 27       	eor	r31, r31
 4ba:	59 1b       	sub	r21, r25
 4bc:	99 f0       	breq	.+38     	; 0x4e4 <__addsf3x+0x5c>
 4be:	59 3f       	cpi	r21, 0xF9	; 249
 4c0:	50 f4       	brcc	.+20     	; 0x4d6 <__addsf3x+0x4e>
 4c2:	50 3e       	cpi	r21, 0xE0	; 224
 4c4:	68 f1       	brcs	.+90     	; 0x520 <__addsf3x+0x98>
 4c6:	1a 16       	cp	r1, r26
 4c8:	f0 40       	sbci	r31, 0x00	; 0
 4ca:	a2 2f       	mov	r26, r18
 4cc:	23 2f       	mov	r18, r19
 4ce:	34 2f       	mov	r19, r20
 4d0:	44 27       	eor	r20, r20
 4d2:	58 5f       	subi	r21, 0xF8	; 248
 4d4:	f3 cf       	rjmp	.-26     	; 0x4bc <__addsf3x+0x34>
 4d6:	46 95       	lsr	r20
 4d8:	37 95       	ror	r19
 4da:	27 95       	ror	r18
 4dc:	a7 95       	ror	r26
 4de:	f0 40       	sbci	r31, 0x00	; 0
 4e0:	53 95       	inc	r21
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__addsf3x+0x4e>
 4e4:	7e f4       	brtc	.+30     	; 0x504 <__addsf3x+0x7c>
 4e6:	1f 16       	cp	r1, r31
 4e8:	ba 0b       	sbc	r27, r26
 4ea:	62 0b       	sbc	r22, r18
 4ec:	73 0b       	sbc	r23, r19
 4ee:	84 0b       	sbc	r24, r20
 4f0:	ba f0       	brmi	.+46     	; 0x520 <__addsf3x+0x98>
 4f2:	91 50       	subi	r25, 0x01	; 1
 4f4:	a1 f0       	breq	.+40     	; 0x51e <__addsf3x+0x96>
 4f6:	ff 0f       	add	r31, r31
 4f8:	bb 1f       	adc	r27, r27
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	c2 f7       	brpl	.-16     	; 0x4f2 <__addsf3x+0x6a>
 502:	0e c0       	rjmp	.+28     	; 0x520 <__addsf3x+0x98>
 504:	ba 0f       	add	r27, r26
 506:	62 1f       	adc	r22, r18
 508:	73 1f       	adc	r23, r19
 50a:	84 1f       	adc	r24, r20
 50c:	48 f4       	brcc	.+18     	; 0x520 <__addsf3x+0x98>
 50e:	87 95       	ror	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f7 95       	ror	r31
 518:	9e 3f       	cpi	r25, 0xFE	; 254
 51a:	08 f0       	brcs	.+2      	; 0x51e <__addsf3x+0x96>
 51c:	b3 cf       	rjmp	.-154    	; 0x484 <__addsf3+0x1e>
 51e:	93 95       	inc	r25
 520:	88 0f       	add	r24, r24
 522:	08 f0       	brcs	.+2      	; 0x526 <__addsf3x+0x9e>
 524:	99 27       	eor	r25, r25
 526:	ee 0f       	add	r30, r30
 528:	97 95       	ror	r25
 52a:	87 95       	ror	r24
 52c:	08 95       	ret

0000052e <__fixunssfsi>:
 52e:	98 d0       	rcall	.+304    	; 0x660 <__fp_splitA>
 530:	88 f0       	brcs	.+34     	; 0x554 <__fixunssfsi+0x26>
 532:	9f 57       	subi	r25, 0x7F	; 127
 534:	90 f0       	brcs	.+36     	; 0x55a <__fixunssfsi+0x2c>
 536:	b9 2f       	mov	r27, r25
 538:	99 27       	eor	r25, r25
 53a:	b7 51       	subi	r27, 0x17	; 23
 53c:	a0 f0       	brcs	.+40     	; 0x566 <__fixunssfsi+0x38>
 53e:	d1 f0       	breq	.+52     	; 0x574 <__fixunssfsi+0x46>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a f0       	brmi	.+6      	; 0x550 <__fixunssfsi+0x22>
 54a:	ba 95       	dec	r27
 54c:	c9 f7       	brne	.-14     	; 0x540 <__fixunssfsi+0x12>
 54e:	12 c0       	rjmp	.+36     	; 0x574 <__fixunssfsi+0x46>
 550:	b1 30       	cpi	r27, 0x01	; 1
 552:	81 f0       	breq	.+32     	; 0x574 <__fixunssfsi+0x46>
 554:	9f d0       	rcall	.+318    	; 0x694 <__fp_zero>
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	08 95       	ret
 55a:	9c c0       	rjmp	.+312    	; 0x694 <__fp_zero>
 55c:	67 2f       	mov	r22, r23
 55e:	78 2f       	mov	r23, r24
 560:	88 27       	eor	r24, r24
 562:	b8 5f       	subi	r27, 0xF8	; 248
 564:	39 f0       	breq	.+14     	; 0x574 <__fixunssfsi+0x46>
 566:	b9 3f       	cpi	r27, 0xF9	; 249
 568:	cc f3       	brlt	.-14     	; 0x55c <__fixunssfsi+0x2e>
 56a:	86 95       	lsr	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b3 95       	inc	r27
 572:	d9 f7       	brne	.-10     	; 0x56a <__fixunssfsi+0x3c>
 574:	3e f4       	brtc	.+14     	; 0x584 <__fixunssfsi+0x56>
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__floatunsisf>:
 586:	e8 94       	clt
 588:	09 c0       	rjmp	.+18     	; 0x59c <__floatsisf+0x12>

0000058a <__floatsisf>:
 58a:	97 fb       	bst	r25, 7
 58c:	3e f4       	brtc	.+14     	; 0x59c <__floatsisf+0x12>
 58e:	90 95       	com	r25
 590:	80 95       	com	r24
 592:	70 95       	com	r23
 594:	61 95       	neg	r22
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	99 23       	and	r25, r25
 59e:	a9 f0       	breq	.+42     	; 0x5ca <__floatsisf+0x40>
 5a0:	f9 2f       	mov	r31, r25
 5a2:	96 e9       	ldi	r25, 0x96	; 150
 5a4:	bb 27       	eor	r27, r27
 5a6:	93 95       	inc	r25
 5a8:	f6 95       	lsr	r31
 5aa:	87 95       	ror	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f1 11       	cpse	r31, r1
 5b4:	f8 cf       	rjmp	.-16     	; 0x5a6 <__floatsisf+0x1c>
 5b6:	fa f4       	brpl	.+62     	; 0x5f6 <__floatsisf+0x6c>
 5b8:	bb 0f       	add	r27, r27
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__floatsisf+0x36>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	1b c0       	rjmp	.+54     	; 0x5f6 <__floatsisf+0x6c>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <__floatsisf+0x6c>
 5ca:	88 23       	and	r24, r24
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__floatsisf+0x48>
 5ce:	96 e9       	ldi	r25, 0x96	; 150
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <__floatsisf+0x6a>
 5d2:	77 23       	and	r23, r23
 5d4:	21 f0       	breq	.+8      	; 0x5de <__floatsisf+0x54>
 5d6:	9e e8       	ldi	r25, 0x8E	; 142
 5d8:	87 2f       	mov	r24, r23
 5da:	76 2f       	mov	r23, r22
 5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__floatsisf+0x5e>
 5de:	66 23       	and	r22, r22
 5e0:	71 f0       	breq	.+28     	; 0x5fe <__floatsisf+0x74>
 5e2:	96 e8       	ldi	r25, 0x86	; 134
 5e4:	86 2f       	mov	r24, r22
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	2a f0       	brmi	.+10     	; 0x5f6 <__floatsisf+0x6c>
 5ec:	9a 95       	dec	r25
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	da f7       	brpl	.-10     	; 0x5ec <__floatsisf+0x62>
 5f6:	88 0f       	add	r24, r24
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <__fp_inf>:
 600:	97 f9       	bld	r25, 7
 602:	9f 67       	ori	r25, 0x7F	; 127
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	08 95       	ret

0000060c <__fp_nan>:
 60c:	9f ef       	ldi	r25, 0xFF	; 255
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	08 95       	ret

00000612 <__fp_pscA>:
 612:	00 24       	eor	r0, r0
 614:	0a 94       	dec	r0
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	09 06       	cpc	r0, r25
 61e:	08 95       	ret

00000620 <__fp_pscB>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	05 06       	cpc	r0, r21
 62c:	08 95       	ret

0000062e <__fp_round>:
 62e:	09 2e       	mov	r0, r25
 630:	03 94       	inc	r0
 632:	00 0c       	add	r0, r0
 634:	11 f4       	brne	.+4      	; 0x63a <__fp_round+0xc>
 636:	88 23       	and	r24, r24
 638:	52 f0       	brmi	.+20     	; 0x64e <__fp_round+0x20>
 63a:	bb 0f       	add	r27, r27
 63c:	40 f4       	brcc	.+16     	; 0x64e <__fp_round+0x20>
 63e:	bf 2b       	or	r27, r31
 640:	11 f4       	brne	.+4      	; 0x646 <__fp_round+0x18>
 642:	60 ff       	sbrs	r22, 0
 644:	04 c0       	rjmp	.+8      	; 0x64e <__fp_round+0x20>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__fp_split3>:
 650:	57 fd       	sbrc	r21, 7
 652:	90 58       	subi	r25, 0x80	; 128
 654:	44 0f       	add	r20, r20
 656:	55 1f       	adc	r21, r21
 658:	59 f0       	breq	.+22     	; 0x670 <__fp_splitA+0x10>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	71 f0       	breq	.+28     	; 0x67a <__fp_splitA+0x1a>
 65e:	47 95       	ror	r20

00000660 <__fp_splitA>:
 660:	88 0f       	add	r24, r24
 662:	97 fb       	bst	r25, 7
 664:	99 1f       	adc	r25, r25
 666:	61 f0       	breq	.+24     	; 0x680 <__fp_splitA+0x20>
 668:	9f 3f       	cpi	r25, 0xFF	; 255
 66a:	79 f0       	breq	.+30     	; 0x68a <__fp_splitA+0x2a>
 66c:	87 95       	ror	r24
 66e:	08 95       	ret
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	55 1f       	adc	r21, r21
 678:	f2 cf       	rjmp	.-28     	; 0x65e <__fp_split3+0xe>
 67a:	46 95       	lsr	r20
 67c:	f1 df       	rcall	.-30     	; 0x660 <__fp_splitA>
 67e:	08 c0       	rjmp	.+16     	; 0x690 <__fp_splitA+0x30>
 680:	16 16       	cp	r1, r22
 682:	17 06       	cpc	r1, r23
 684:	18 06       	cpc	r1, r24
 686:	99 1f       	adc	r25, r25
 688:	f1 cf       	rjmp	.-30     	; 0x66c <__fp_splitA+0xc>
 68a:	86 95       	lsr	r24
 68c:	71 05       	cpc	r23, r1
 68e:	61 05       	cpc	r22, r1
 690:	08 94       	sec
 692:	08 95       	ret

00000694 <__fp_zero>:
 694:	e8 94       	clt

00000696 <__fp_szero>:
 696:	bb 27       	eor	r27, r27
 698:	66 27       	eor	r22, r22
 69a:	77 27       	eor	r23, r23
 69c:	cb 01       	movw	r24, r22
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret

000006a2 <__mulsf3>:
 6a2:	0b d0       	rcall	.+22     	; 0x6ba <__mulsf3x>
 6a4:	c4 cf       	rjmp	.-120    	; 0x62e <__fp_round>
 6a6:	b5 df       	rcall	.-150    	; 0x612 <__fp_pscA>
 6a8:	28 f0       	brcs	.+10     	; 0x6b4 <__mulsf3+0x12>
 6aa:	ba df       	rcall	.-140    	; 0x620 <__fp_pscB>
 6ac:	18 f0       	brcs	.+6      	; 0x6b4 <__mulsf3+0x12>
 6ae:	95 23       	and	r25, r21
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__mulsf3+0x12>
 6b2:	a6 cf       	rjmp	.-180    	; 0x600 <__fp_inf>
 6b4:	ab cf       	rjmp	.-170    	; 0x60c <__fp_nan>
 6b6:	11 24       	eor	r1, r1
 6b8:	ee cf       	rjmp	.-36     	; 0x696 <__fp_szero>

000006ba <__mulsf3x>:
 6ba:	ca df       	rcall	.-108    	; 0x650 <__fp_split3>
 6bc:	a0 f3       	brcs	.-24     	; 0x6a6 <__mulsf3+0x4>

000006be <__mulsf3_pse>:
 6be:	95 9f       	mul	r25, r21
 6c0:	d1 f3       	breq	.-12     	; 0x6b6 <__mulsf3+0x14>
 6c2:	95 0f       	add	r25, r21
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	55 1f       	adc	r21, r21
 6c8:	62 9f       	mul	r22, r18
 6ca:	f0 01       	movw	r30, r0
 6cc:	72 9f       	mul	r23, r18
 6ce:	bb 27       	eor	r27, r27
 6d0:	f0 0d       	add	r31, r0
 6d2:	b1 1d       	adc	r27, r1
 6d4:	63 9f       	mul	r22, r19
 6d6:	aa 27       	eor	r26, r26
 6d8:	f0 0d       	add	r31, r0
 6da:	b1 1d       	adc	r27, r1
 6dc:	aa 1f       	adc	r26, r26
 6de:	64 9f       	mul	r22, r20
 6e0:	66 27       	eor	r22, r22
 6e2:	b0 0d       	add	r27, r0
 6e4:	a1 1d       	adc	r26, r1
 6e6:	66 1f       	adc	r22, r22
 6e8:	82 9f       	mul	r24, r18
 6ea:	22 27       	eor	r18, r18
 6ec:	b0 0d       	add	r27, r0
 6ee:	a1 1d       	adc	r26, r1
 6f0:	62 1f       	adc	r22, r18
 6f2:	73 9f       	mul	r23, r19
 6f4:	b0 0d       	add	r27, r0
 6f6:	a1 1d       	adc	r26, r1
 6f8:	62 1f       	adc	r22, r18
 6fa:	83 9f       	mul	r24, r19
 6fc:	a0 0d       	add	r26, r0
 6fe:	61 1d       	adc	r22, r1
 700:	22 1f       	adc	r18, r18
 702:	74 9f       	mul	r23, r20
 704:	33 27       	eor	r19, r19
 706:	a0 0d       	add	r26, r0
 708:	61 1d       	adc	r22, r1
 70a:	23 1f       	adc	r18, r19
 70c:	84 9f       	mul	r24, r20
 70e:	60 0d       	add	r22, r0
 710:	21 1d       	adc	r18, r1
 712:	82 2f       	mov	r24, r18
 714:	76 2f       	mov	r23, r22
 716:	6a 2f       	mov	r22, r26
 718:	11 24       	eor	r1, r1
 71a:	9f 57       	subi	r25, 0x7F	; 127
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	8a f0       	brmi	.+34     	; 0x742 <__mulsf3_pse+0x84>
 720:	e1 f0       	breq	.+56     	; 0x75a <__mulsf3_pse+0x9c>
 722:	88 23       	and	r24, r24
 724:	4a f0       	brmi	.+18     	; 0x738 <__mulsf3_pse+0x7a>
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	bb 1f       	adc	r27, r27
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	91 50       	subi	r25, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	a9 f7       	brne	.-22     	; 0x722 <__mulsf3_pse+0x64>
 738:	9e 3f       	cpi	r25, 0xFE	; 254
 73a:	51 05       	cpc	r21, r1
 73c:	70 f0       	brcs	.+28     	; 0x75a <__mulsf3_pse+0x9c>
 73e:	60 cf       	rjmp	.-320    	; 0x600 <__fp_inf>
 740:	aa cf       	rjmp	.-172    	; 0x696 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	ec f3       	brlt	.-6      	; 0x740 <__mulsf3_pse+0x82>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	dc f3       	brlt	.-10     	; 0x740 <__mulsf3_pse+0x82>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	e7 95       	ror	r30
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c1 f7       	brne	.-16     	; 0x74a <__mulsf3_pse+0x8c>
 75a:	fe 2b       	or	r31, r30
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
