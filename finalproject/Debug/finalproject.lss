
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002ac  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000119d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db4  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000674  00000000  00000000  00002361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000029d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061f  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003de  00000000  00000000  00003093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ea       	ldi	r30, 0xAC	; 172
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	32 d0       	rcall	.+100    	; 0x174 <main>
 110:	cb c0       	rjmp	.+406    	; 0x2a8 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	DDRF = 0x00; //set PORTF as input
 114:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFC; //turn on pull-up resistors
 116:	8c ef       	ldi	r24, 0xFC	; 252
 118:	81 bb       	out	0x11, r24	; 17
	ADCSRA = (1<< ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enable ADC and set prescaler
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 120:	08 95       	ret

00000122 <ten_bit_ADC>:

uint16_t ten_bit_ADC(uint8_t channel)
{
	uint16_t result; //store ADC value
	
	ADMUX = (ADMUX & 0xE0); // clear ADMUX and select channel
 122:	ec e7       	ldi	r30, 0x7C	; 124
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 7e       	andi	r24, 0xE0	; 224
 12a:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0); //set to VCC
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC); //begin conversion
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF))==0) //wait for conversion to end
 13c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 140:	84 ff       	sbrs	r24, 4
 142:	fc cf       	rjmp	.-8      	; 0x13c <ten_bit_ADC+0x1a>
	{
		
	}
	
	result = ADCL; //store value and freeze ADCH register
 144:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	result |= (ADCH<<8); //store value
 148:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	98 2f       	mov	r25, r24
 150:	88 27       	eor	r24, r24
	ADCSRA |= (1<<ADIF); //clear interrupt flag
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	20 81       	ld	r18, Z
 158:	20 61       	ori	r18, 0x10	; 16
 15a:	20 83       	st	Z, r18
	
	return result; // return result
 15c:	83 2b       	or	r24, r19
 15e:	08 95       	ret

00000160 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 166:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 16a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 16c:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 16e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 170:	88 b9       	out	0x08, r24	; 8
 172:	08 95       	ret

00000174 <main>:
#include "stepper_motor.h"
#include "ADC.h"

int main(void)
{
	io_init();
 174:	f5 df       	rcall	.-22     	; 0x160 <io_init>
	init_ADC();
 176:	ce df       	rcall	.-100    	; 0x114 <init_ADC>
 178:	e0 e8       	ldi	r30, 0x80	; 128
	//TCCR3B = 0b00011000;
	//TCCR3A = TCCR3A | 0x80;  	// configure for clear on match
	//TCCR3B = TCCR3B | 0x02;
	//ICR3 = 39999; //use PWM mode 14
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 6a       	ori	r24, 0xA2	; 162
 180:	80 83       	st	Z, r24
 182:	e1 e8       	ldi	r30, 0x81	; 129
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8b 61       	ori	r24, 0x1B	; 27
 18a:	80 83       	st	Z, r24
 18c:	87 e8       	ldi	r24, 0x87	; 135

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 18e:	93 e1       	ldi	r25, 0x13	; 19
 190:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 194:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
 198:	80 e2       	ldi	r24, 0x20	; 32

	DDRB = 0x20;   //PWM Pins as Out
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <main+0x32>
	
	while ((PINC & 0x01))
 19e:	61 e0       	ldi	r22, 0x01	; 1
	{
		Stepper_Position('W',n);
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	87 e5       	ldi	r24, 0x57	; 87
 1a4:	2e d0       	rcall	.+92     	; 0x202 <Stepper_Position>
 1a6:	30 99       	sbic	0x06, 0	; 6

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).

	DDRB = 0x20;   //PWM Pins as Out
	
	while ((PINC & 0x01))
 1a8:	fa cf       	rjmp	.-12     	; 0x19e <main+0x2a>
 1aa:	60 ed       	ldi	r22, 0xD0	; 208
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	86 e4       	ldi	r24, 0x46	; 70
 1b0:	28 d0       	rcall	.+80     	; 0x202 <Stepper_Position>
 1b2:	80 b1       	in	r24, 0x00	; 0
	
    while (1) 
    {
	
		switch (PushButton)
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	61 f0       	breq	.+24     	; 0x1d2 <main+0x5e>
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	99 f0       	breq	.+38     	; 0x1e4 <main+0x70>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	b9 f4       	brne	.+46     	; 0x1f0 <main+0x7c>
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <main+0x58>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	87 e5       	ldi	r24, 0x57	; 87
 1ca:	1b d0       	rcall	.+54     	; 0x202 <Stepper_Position>
 1cc:	00 99       	sbic	0x00, 0	; 0
	
		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 1ce:	fa cf       	rjmp	.-12     	; 0x1c4 <main+0x50>
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <main+0x7c>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	86 e4       	ldi	r24, 0x46	; 70
 1d8:	14 d0       	rcall	.+40     	; 0x202 <Stepper_Position>

				break;
 1da:	0a c0       	rjmp	.+20     	; 0x1f0 <main+0x7c>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	87 e5       	ldi	r24, 0x57	; 87
 1e2:	0f d0       	rcall	.+30     	; 0x202 <Stepper_Position>
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 1e4:	30 99       	sbic	0x06, 0	; 6
 1e6:	fa cf       	rjmp	.-12     	; 0x1dc <main+0x68>
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 1e8:	60 ed       	ldi	r22, 0xD0	; 208
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	86 e4       	ldi	r24, 0x46	; 70
 1ee:	09 d0       	rcall	.+18     	; 0x202 <Stepper_Position>
				break;

			}
		}
		
		PORTK = 0x00; //clear output when done
 1f0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		//value = ten_bit_ADC(0); //read the channel from the Potentiometer
		//value = ((value + 900)+(value *.173)); //convert the value read to the proper value
		//OCR3A = value * 2; // set OCR3A to the value
		
		
		OCR1A = ten_bit_ADC(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	95 df       	rcall	.-214    	; 0x122 <ten_bit_ADC>
 1f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 200:	d8 cf       	rjmp	.-80     	; 0x1b2 <main+0x3e>

00000202 <Stepper_Position>:
		
		
		
	}
 202:	86 34       	cpi	r24, 0x46	; 70
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 204:	51 f1       	breq	.+84     	; 0x25a <Stepper_Position+0x58>
 206:	87 35       	cpi	r24, 0x57	; 87
 208:	09 f0       	breq	.+2      	; 0x20c <Stepper_Position+0xa>
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 20c:	ab 01       	movw	r20, r22
 20e:	44 0f       	add	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	46 0f       	add	r20, r22
 214:	57 1f       	adc	r21, r23
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	56 95       	lsr	r21
 21c:	47 95       	ror	r20
 21e:	56 95       	lsr	r21
 220:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	15 c0       	rjmp	.+42     	; 0x252 <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 228:	fc 01       	movw	r30, r24
 22a:	ec 5f       	subi	r30, 0xFC	; 252
 22c:	fd 4f       	sbci	r31, 0xFD	; 253
 22e:	20 81       	ld	r18, Z
 230:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	ef eb       	ldi	r30, 0xBF	; 191
 236:	fd e5       	ldi	r31, 0x5D	; 93
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <Stepper_Position+0x36>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <Stepper_Position+0x3c>
 23e:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	02 c0       	rjmp	.+4      	; 0x248 <Stepper_Position+0x46>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	91 05       	cpc	r25, r1
 24c:	68 f3       	brcs	.-38     	; 0x228 <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	64 17       	cp	r22, r20
 254:	75 07       	cpc	r23, r21
 256:	b0 f3       	brcs	.-20     	; 0x244 <Stepper_Position+0x42>
 258:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 25a:	ab 01       	movw	r20, r22
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	46 0f       	add	r20, r22
 262:	57 1f       	adc	r21, r23
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	56 95       	lsr	r21
 26a:	47 95       	ror	r20
 26c:	56 95       	lsr	r21
 26e:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	15 c0       	rjmp	.+42     	; 0x2a0 <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 276:	fc 01       	movw	r30, r24
 278:	e0 50       	subi	r30, 0x00	; 0
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	20 81       	ld	r18, Z
 27e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 282:	ef eb       	ldi	r30, 0xBF	; 191
 284:	fd e5       	ldi	r31, 0x5D	; 93
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Stepper_Position+0x84>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Stepper_Position+0x8a>
 28c:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	02 c0       	rjmp	.+4      	; 0x296 <Stepper_Position+0x94>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	91 05       	cpc	r25, r1
 29a:	68 f3       	brcs	.-38     	; 0x276 <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 29c:	6f 5f       	subi	r22, 0xFF	; 255
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	64 17       	cp	r22, r20
 2a2:	75 07       	cpc	r23, r21
 2a4:	b0 f3       	brcs	.-20     	; 0x292 <Stepper_Position+0x90>
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
