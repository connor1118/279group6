
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800238  00800238  000004fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001461  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f09  00000000  00000000  00001a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086a  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005df  00000000  00000000  000039da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	9d c1       	rjmp	.+826    	; 0x3a0 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 35       	cpi	r26, 0x54	; 84
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	30 d0       	rcall	.+96     	; 0x180 <main>
 120:	84 c1       	rjmp	.+776    	; 0x42a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC>:
#include "ADC.h"


void init_ADC(void)
{
	DDRF = 0x00; //set PORTF as input
 124:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xFC; //turn on pull-up resistors
 126:	8c ef       	ldi	r24, 0xFC	; 252
 128:	81 bb       	out	0x11, r24	; 17
	ADCSRA = (1<< ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //enable ADC and set prescaler
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 130:	08 95       	ret

00000132 <ten_bit_ADC>:

uint16_t ten_bit_ADC(uint8_t channel)
{
	uint16_t result; //store ADC value
	
	ADMUX = (ADMUX & 0xE0) | channel; // clear ADMUX and select channel
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	90 7e       	andi	r25, 0xE0	; 224
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
	ADMUX |= (1<< REFS0) | (1<<ADLAR); //set to VCC
 13e:	80 81       	ld	r24, Z
 140:	80 66       	ori	r24, 0x60	; 96
 142:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC); //begin conversion
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF))==0) //wait for conversion to end
 14e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <ten_bit_ADC+0x1c>
	{
		
	}
	
	result = ADCH; //store value and freeze ADCH register
 156:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	//result |= (ADCH<<8); //store value
	ADCSRA |= (1<<ADIF); //clear interrupt flag
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	90 61       	ori	r25, 0x10	; 16
 162:	90 83       	st	Z, r25
	
	return result; // return result
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 16e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 172:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 174:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 176:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 178:	88 b9       	out	0x08, r24	; 8
	DDRB = 0x60;   //PWM Pins as Out
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	84 b9       	out	0x04, r24	; 4
 17e:	08 95       	ret

00000180 <main>:
#include "main.h"

void io_init(void);

int main(void)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	64 97       	sbiw	r28, 0x14	; 20
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	io_init();
 194:	e9 df       	rcall	.-46     	; 0x168 <io_init>
	init_ADC();
 196:	c6 df       	rcall	.-116    	; 0x124 <init_ADC>
	Init_UART();
 198:	f5 d0       	rcall	.+490    	; 0x384 <Init_UART>
 19a:	78 94       	sei
	uint8_t n=1;
	uint8_t i = 0;
	sei();
 19c:	89 e0       	ldi	r24, 0x09	; 9
	uint16_t arm_pos_one = 0;
	uint16_t ef_pos_one = 0;
	uint16_t base_pos_one = 0;
	
	
	char pass[20] = {"password"};
 19e:	e8 e0       	ldi	r30, 0x08	; 8
 1a0:	f2 e0       	ldi	r31, 0x02	; 2
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x26>
 1ae:	fe 01       	movw	r30, r28
 1b0:	3a 96       	adiw	r30, 0x0a	; 10
 1b2:	8b e0       	ldi	r24, 0x0B	; 11
 1b4:	df 01       	movw	r26, r30
 1b6:	1d 92       	st	X+, r1
 1b8:	8a 95       	dec	r24
 1ba:	e9 f7       	brne	.-6      	; 0x1b6 <main+0x36>
 1bc:	e0 e8       	ldi	r30, 0x80	; 128
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	82 6a       	ori	r24, 0xA2	; 162
 1c4:	80 83       	st	Z, r24
 1c6:	e1 e8       	ldi	r30, 0x81	; 129
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	8b 61       	ori	r24, 0x1B	; 27
 1ce:	80 83       	st	Z, r24
 1d0:	87 e8       	ldi	r24, 0x87	; 135

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
 1d8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
 1dc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	
	OCR1A = 0;
 1e0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1e4:	8a ef       	ldi	r24, 0xFA	; 250
	OCR1B = 250;
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 1f0:	91 e0       	ldi	r25, 0x01	; 1
	sei();
	uint8_t h= 2000;
	
	uint16_t value = 0;
	uint16_t value_two = 0;
	uint8_t locked = 1;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
{
	io_init();
	init_ADC();
	Init_UART();
	uint8_t n=1;
	uint8_t i = 0;
 1f4:	23 c0       	rjmp	.+70     	; 0x23c <main+0xbc>
	
	OCR1A = 0;
	OCR1B = 250;
	
	
	while(locked == 1){
 1f6:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <LCD_update>
		if(LCD_update == 1){
 1fa:	21 30       	cpi	r18, 0x01	; 1
 1fc:	f9 f4       	brne	.+62     	; 0x23c <main+0xbc>
 1fe:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <LCD_update>
			LCD_update = 0;
 202:	11 c0       	rjmp	.+34     	; 0x226 <main+0xa6>
			
			while(pass[i]){
 204:	f9 01       	movw	r30, r18
				if(rx_buffer[i] == pass[i])
 206:	e7 5c       	subi	r30, 0xC7	; 199
 208:	fd 4f       	sbci	r31, 0xFD	; 253
 20a:	20 81       	ld	r18, Z
 20c:	42 13       	cpse	r20, r18
 20e:	01 c0       	rjmp	.+2      	; 0x212 <main+0x92>
 210:	8f 5f       	subi	r24, 0xFF	; 255
				{
					i++;
 212:	e1 e0       	ldi	r30, 0x01	; 1
				}
				if (!pass[i]){
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	e8 0f       	add	r30, r24
 21c:	f1 1d       	adc	r31, r1
 21e:	20 81       	ld	r18, Z
 220:	21 11       	cpse	r18, r1
 222:	01 c0       	rjmp	.+2      	; 0x226 <main+0xa6>
 224:	90 e0       	ldi	r25, 0x00	; 0
					locked = 0;
 226:	28 2f       	mov	r18, r24
	
	while(locked == 1){
		if(LCD_update == 1){
			LCD_update = 0;
			
			while(pass[i]){
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e2 0f       	add	r30, r18
 234:	f3 1f       	adc	r31, r19
 236:	40 81       	ld	r20, Z
 238:	41 11       	cpse	r20, r1
 23a:	e4 cf       	rjmp	.-56     	; 0x204 <main+0x84>
 23c:	91 30       	cpi	r25, 0x01	; 1
	
	OCR1A = 0;
	OCR1B = 250;
	
	
	while(locked == 1){
 23e:	d9 f2       	breq	.-74     	; 0x1f6 <main+0x76>
					locked = 0;
				}
			}
		}
	}
	UART_outstring("Configuration mode enabled");
 240:	8c e1       	ldi	r24, 0x1C	; 28
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	de d0       	rcall	.+444    	; 0x402 <UART_outstring>
 246:	04 c0       	rjmp	.+8      	; 0x250 <main+0xd0>
	
	while ((PINC & 0x01))
	{
		Stepper_Position('W',n);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	87 e5       	ldi	r24, 0x57	; 87
 24e:	40 d0       	rcall	.+128    	; 0x2d0 <Stepper_Position>
 250:	30 99       	sbic	0x06, 0	; 6
			}
		}
	}
	UART_outstring("Configuration mode enabled");
	
	while ((PINC & 0x01))
 252:	fa cf       	rjmp	.-12     	; 0x248 <main+0xc8>
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 254:	60 ed       	ldi	r22, 0xD0	; 208
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	86 e4       	ldi	r24, 0x46	; 70
 25a:	3a d0       	rcall	.+116    	; 0x2d0 <Stepper_Position>
 25c:	80 b1       	in	r24, 0x00	; 0
	
    while (1) 
    {
	
		switch (PushButton)
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	61 f0       	breq	.+24     	; 0x27c <main+0xfc>
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	99 f0       	breq	.+38     	; 0x28e <main+0x10e>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	b9 f4       	brne	.+46     	; 0x29a <main+0x11a>
 26c:	04 c0       	rjmp	.+8      	; 0x276 <main+0xf6>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	87 e5       	ldi	r24, 0x57	; 87
 274:	2d d0       	rcall	.+90     	; 0x2d0 <Stepper_Position>
	
		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 276:	00 99       	sbic	0x00, 0	; 0
 278:	fa cf       	rjmp	.-12     	; 0x26e <main+0xee>
 27a:	0f c0       	rjmp	.+30     	; 0x29a <main+0x11a>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	86 e4       	ldi	r24, 0x46	; 70
 282:	26 d0       	rcall	.+76     	; 0x2d0 <Stepper_Position>

				break;
 284:	0a c0       	rjmp	.+20     	; 0x29a <main+0x11a>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	87 e5       	ldi	r24, 0x57	; 87
 28c:	21 d0       	rcall	.+66     	; 0x2d0 <Stepper_Position>
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 28e:	30 99       	sbic	0x06, 0	; 6
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 290:	fa cf       	rjmp	.-12     	; 0x286 <main+0x106>
 292:	60 ed       	ldi	r22, 0xD0	; 208
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	86 e4       	ldi	r24, 0x46	; 70
 298:	1b d0       	rcall	.+54     	; 0x2d0 <Stepper_Position>
				break;

			}
		}
		
		PORTK = 0x00; //clear output when done
 29a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		
			value = ten_bit_ADC(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	48 df       	rcall	.-368    	; 0x132 <ten_bit_ADC>
			value = ((value*2)+97);
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	8f 59       	subi	r24, 0x9F	; 159
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
			OCR1A = value;
 2aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			value_two = ten_bit_ADC(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	3e df       	rcall	.-388    	; 0x132 <ten_bit_ADC>
 2b6:	88 0f       	add	r24, r24
			value_two = ((value_two*2)+97);
 2b8:	99 1f       	adc	r25, r25
 2ba:	8f 59       	subi	r24, 0x9F	; 159
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
			OCR1B = value_two;
 2c2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <main+0x14a>
				
		while (PINC & 0x02)
 2c8:	80 b1       	in	r24, 0x00	; 0
		{
			if (PINA & 0x01)
 2ca:	31 99       	sbic	0x06, 1	; 6
			OCR1A = value;
			value_two = ten_bit_ADC(1);
			value_two = ((value_two*2)+97);
			OCR1B = value_two;
				
		while (PINC & 0x02)
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <main+0x148>
 2ce:	c6 cf       	rjmp	.-116    	; 0x25c <main+0xdc>

000002d0 <Stepper_Position>:
 2d0:	86 34       	cpi	r24, 0x46	; 70
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 2d2:	51 f1       	breq	.+84     	; 0x328 <Stepper_Position+0x58>
 2d4:	87 35       	cpi	r24, 0x57	; 87
 2d6:	09 f0       	breq	.+2      	; 0x2da <Stepper_Position+0xa>
 2d8:	4d c0       	rjmp	.+154    	; 0x374 <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 2da:	ab 01       	movw	r20, r22
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	46 0f       	add	r20, r22
 2e2:	57 1f       	adc	r21, r23
 2e4:	44 0f       	add	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	56 95       	lsr	r21
 2ea:	47 95       	ror	r20
 2ec:	56 95       	lsr	r21
 2ee:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	15 c0       	rjmp	.+42     	; 0x320 <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 2f6:	fc 01       	movw	r30, r24
 2f8:	ec 5f       	subi	r30, 0xFC	; 252
 2fa:	fd 4f       	sbci	r31, 0xFD	; 253
 2fc:	20 81       	ld	r18, Z
 2fe:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	ef eb       	ldi	r30, 0xBF	; 191
 304:	fd e5       	ldi	r31, 0x5D	; 93
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Stepper_Position+0x36>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Stepper_Position+0x3c>
 30c:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	02 c0       	rjmp	.+4      	; 0x316 <Stepper_Position+0x46>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	84 30       	cpi	r24, 0x04	; 4
 318:	91 05       	cpc	r25, r1
 31a:	68 f3       	brcs	.-38     	; 0x2f6 <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 31c:	6f 5f       	subi	r22, 0xFF	; 255
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	64 17       	cp	r22, r20
 322:	75 07       	cpc	r23, r21
 324:	b0 f3       	brcs	.-20     	; 0x312 <Stepper_Position+0x42>
 326:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 328:	ab 01       	movw	r20, r22
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	46 0f       	add	r20, r22
 330:	57 1f       	adc	r21, r23
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	56 95       	lsr	r21
 338:	47 95       	ror	r20
 33a:	56 95       	lsr	r21
 33c:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	15 c0       	rjmp	.+42     	; 0x36e <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 344:	fc 01       	movw	r30, r24
 346:	e0 50       	subi	r30, 0x00	; 0
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	20 81       	ld	r18, Z
 34c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 350:	ef eb       	ldi	r30, 0xBF	; 191
 352:	fd e5       	ldi	r31, 0x5D	; 93
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <Stepper_Position+0x84>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Stepper_Position+0x8a>
 35a:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	02 c0       	rjmp	.+4      	; 0x364 <Stepper_Position+0x94>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	84 30       	cpi	r24, 0x04	; 4
 366:	91 05       	cpc	r25, r1
 368:	68 f3       	brcs	.-38     	; 0x344 <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	64 17       	cp	r22, r20
 370:	75 07       	cpc	r23, r21
 372:	b0 f3       	brcs	.-20     	; 0x360 <Stepper_Position+0x90>
 374:	08 95       	ret

00000376 <UART_out>:
#include "main.h"

void UART_out(uint8_t ch)
{
	
	while((UCSR0A & (1<< UDRE0)) == 0)
 376:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 37a:	95 ff       	sbrs	r25, 5
 37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_out>
	{	
	}
	UDR0 = ch;
 37e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 382:	08 95       	ret

00000384 <Init_UART>:
}


void Init_UART(void)
{
	UCSR0A = 0x00;
 384:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UBRR0H = 0x00;
 388:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = myubr;
 38c:	87 e6       	ldi	r24, 0x67	; 103
 38e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);  //initialize with the interrupt bit enabled
 392:	88 e9       	ldi	r24, 0x98	; 152
 394:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 39e:	08 95       	ret

000003a0 <__vector_25>:
//ISR(USART0_RX_vect)
//{
//	rx_char = UDR0;
//	}

ISR(USART0_RX_vect){
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	0b b6       	in	r0, 0x3b	; 59
 3ac:	0f 92       	push	r0
 3ae:	8f 93       	push	r24
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	uint8_t rx_char = UDR0;
 3b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if(rx_char == 0x0D)  //if the enter button is pushed, execute code inside
 3b8:	8d 30       	cpi	r24, 0x0D	; 13
 3ba:	61 f4       	brne	.+24     	; 0x3d4 <__vector_25+0x34>
	{
		rx_buffer[array_index] = '\0';  //end the line and reset index value to zero, and update boolean to 1
 3bc:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <__data_end>
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	e7 5c       	subi	r30, 0xC7	; 199
 3c4:	fd 4f       	sbci	r31, 0xFD	; 253
 3c6:	10 82       	st	Z, r1
		array_index = 0;
 3c8:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <__data_end>
		LCD_update = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <LCD_update>
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__vector_25+0x4e>
	}else if(rx_char == 0x0A){  //does nothing if it is the next line
 3d4:	8a 30       	cpi	r24, 0x0A	; 10
 3d6:	59 f0       	breq	.+22     	; 0x3ee <__vector_25+0x4e>
		
	}else{
		rx_buffer[array_index] = rx_char;  //otherwise add the current value of the UDR0 to the rx_buffer and increment the index
 3d8:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <__data_end>
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	e7 5c       	subi	r30, 0xC7	; 199
 3e0:	fd 4f       	sbci	r31, 0xFD	; 253
 3e2:	80 83       	st	Z, r24
		array_index++;
 3e4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
		
}
	}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0b be       	out	0x3b, r0	; 59
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <UART_outstring>:
	
	
	void UART_outstring(char ch[])
	{
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	8c 01       	movw	r16, r24
		uint8_t i = 0;
 40a:	c0 e0       	ldi	r28, 0x00	; 0
		while(ch[i])
 40c:	02 c0       	rjmp	.+4      	; 0x412 <UART_outstring+0x10>
		{
			UART_out(ch[i]);
 40e:	b3 df       	rcall	.-154    	; 0x376 <UART_out>
			i++;
 410:	cf 5f       	subi	r28, 0xFF	; 255
	
	
	void UART_outstring(char ch[])
	{
		uint8_t i = 0;
		while(ch[i])
 412:	f8 01       	movw	r30, r16
 414:	ec 0f       	add	r30, r28
 416:	f1 1d       	adc	r31, r1
 418:	80 81       	ld	r24, Z
 41a:	81 11       	cpse	r24, r1
 41c:	f8 cf       	rjmp	.-16     	; 0x40e <UART_outstring+0xc>
		{
			UART_out(ch[i]);
			i++;
		}
		UART_out(0x0D);
 41e:	8d e0       	ldi	r24, 0x0D	; 13
 420:	aa df       	rcall	.-172    	; 0x376 <UART_out>
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
