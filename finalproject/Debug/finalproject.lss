
finalproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000022e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001089  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d1c  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056a  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ea  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000392  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0c d0       	rcall	.+24     	; 0x128 <main>
 110:	8c c0       	rjmp	.+280    	; 0x22a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <io_init>:

void io_init(void)

{

	DDRK = 0xFF; //set PORTK as output
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK = 0x00; //turn off LED at initialization
 11a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	DDRA = 0x00; //set PORTA as input
 11e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; //turn on pull-up resistors
 120:	82 b9       	out	0x02, r24	; 2
	DDRC = 0x00;
 122:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
 124:	88 b9       	out	0x08, r24	; 8
 126:	08 95       	ret

00000128 <main>:
#include <util/delay.h>
#include "stepper_motor.h"

int main(void)
{
	io_init();
 128:	f5 df       	rcall	.-22     	; 0x114 <io_init>
	uint8_t n=1;
	
	uint8_t h=2000;

	
	while ((PINC & 0x01))
 12a:	04 c0       	rjmp	.+8      	; 0x134 <main+0xc>
	{
		Stepper_Position('W',n);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	87 e5       	ldi	r24, 0x57	; 87
 132:	28 d0       	rcall	.+80     	; 0x184 <Stepper_Position>
	uint8_t n=1;
	
	uint8_t h=2000;

	
	while ((PINC & 0x01))
 134:	30 99       	sbic	0x06, 0	; 6
 136:	fa cf       	rjmp	.-12     	; 0x12c <main+0x4>
	{
		Stepper_Position('W',n);
	}
	Stepper_Position('F',h);
 138:	60 ed       	ldi	r22, 0xD0	; 208
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	86 e4       	ldi	r24, 0x46	; 70
 13e:	22 d0       	rcall	.+68     	; 0x184 <Stepper_Position>
	
	

		

		switch (PushButton)
 140:	80 b1       	in	r24, 0x00	; 0
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	61 f0       	breq	.+24     	; 0x160 <main+0x38>
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	99 f0       	breq	.+38     	; 0x172 <main+0x4a>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	b9 f4       	brne	.+46     	; 0x17e <main+0x56>
 150:	04 c0       	rjmp	.+8      	; 0x15a <main+0x32>
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
				{
				Stepper_Position('W',n); //Wave rotation
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	87 e5       	ldi	r24, 0x57	; 87
 158:	15 d0       	rcall	.+42     	; 0x184 <Stepper_Position>

		switch (PushButton)
		{
			case Wave_Step:
			{
				while (PINA & Wave_Step)
 15a:	00 99       	sbic	0x00, 0	; 0
 15c:	fa cf       	rjmp	.-12     	; 0x152 <main+0x2a>

				break;
			}
			case Full_Step:
			{
				Stepper_Position('F',n); //Full rotation
 15e:	0f c0       	rjmp	.+30     	; 0x17e <main+0x56>
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	86 e4       	ldi	r24, 0x46	; 70

				break;
 166:	0e d0       	rcall	.+28     	; 0x184 <Stepper_Position>
			
			case Position:
			{
				while ((PINC & 0x01))
				{
					Stepper_Position('W',n);
 168:	0a c0       	rjmp	.+20     	; 0x17e <main+0x56>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	87 e5       	ldi	r24, 0x57	; 87
			}

			
			case Position:
			{
				while ((PINC & 0x01))
 170:	09 d0       	rcall	.+18     	; 0x184 <Stepper_Position>
 172:	30 99       	sbic	0x06, 0	; 6
				{
					Stepper_Position('W',n);
				}
				Stepper_Position('F',h);
 174:	fa cf       	rjmp	.-12     	; 0x16a <main+0x42>
 176:	60 ed       	ldi	r22, 0xD0	; 208
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	86 e4       	ldi	r24, 0x46	; 70
 17c:	03 d0       	rcall	.+6      	; 0x184 <Stepper_Position>
				
				break;

			}
		}
		PORTK = 0x00; //clear output when done
 17e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		}
 182:	de cf       	rjmp	.-68     	; 0x140 <main+0x18>

00000184 <Stepper_Position>:
}
void Stepper_Position(char mode, uint16_t degrees )
{
	uint16_t steps;
	
	switch (mode)
 184:	86 34       	cpi	r24, 0x46	; 70
 186:	51 f1       	breq	.+84     	; 0x1dc <Stepper_Position+0x58>
 188:	87 35       	cpi	r24, 0x57	; 87
 18a:	09 f0       	breq	.+2      	; 0x18e <Stepper_Position+0xa>
 18c:	4d c0       	rjmp	.+154    	; 0x228 <Stepper_Position+0xa4>
	{
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 18e:	ab 01       	movw	r20, r22
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	46 0f       	add	r20, r22
 196:	57 1f       	adc	r21, r23
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	56 95       	lsr	r21
 19e:	47 95       	ror	r20
 1a0:	56 95       	lsr	r21
 1a2:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	15 c0       	rjmp	.+42     	; 0x1d4 <Stepper_Position+0x50>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Wave[j]; //runs step pattern
 1aa:	fc 01       	movw	r30, r24
 1ac:	ec 5f       	subi	r30, 0xFC	; 252
 1ae:	fd 4f       	sbci	r31, 0xFD	; 253
 1b0:	20 81       	ld	r18, Z
 1b2:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	ef eb       	ldi	r30, 0xBF	; 191
 1b8:	fd e5       	ldi	r31, 0x5D	; 93
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Stepper_Position+0x36>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Stepper_Position+0x3c>
 1c0:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Stepper_Position+0x46>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	91 05       	cpc	r25, r1
 1ce:	68 f3       	brcs	.-38     	; 0x1aa <Stepper_Position+0x26>
		case 'W':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 1d0:	6f 5f       	subi	r22, 0xFF	; 255
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	64 17       	cp	r22, r20
 1d6:	75 07       	cpc	r23, r21
 1d8:	b0 f3       	brcs	.-20     	; 0x1c6 <Stepper_Position+0x42>
 1da:	08 95       	ret
		}
		
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
 1dc:	ab 01       	movw	r20, r22
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	46 0f       	add	r20, r22
 1e4:	57 1f       	adc	r21, r23
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	56 95       	lsr	r21
 1ec:	47 95       	ror	r20
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
			
			for(uint16_t i=0;i<steps;i++)
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	15 c0       	rjmp	.+42     	; 0x222 <Stepper_Position+0x9e>
			{
				for(uint16_t j=0; j<4; j++)
				{
					PORTK = Iwave[j]; //runs step pattern
 1f8:	fc 01       	movw	r30, r24
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	20 81       	ld	r18, Z
 200:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 204:	ef eb       	ldi	r30, 0xBF	; 191
 206:	fd e5       	ldi	r31, 0x5D	; 93
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <Stepper_Position+0x84>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <Stepper_Position+0x8a>
 20e:	00 00       	nop
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
			{
				for(uint16_t j=0; j<4; j++)
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	02 c0       	rjmp	.+4      	; 0x218 <Stepper_Position+0x94>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	91 05       	cpc	r25, r1
 21c:	68 f3       	brcs	.-38     	; 0x1f8 <Stepper_Position+0x74>
		case 'F':
		{
			
			steps = degrees*6/4; //calculate number of steps for needed degrees
			
			for(uint16_t i=0;i<steps;i++)
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	64 17       	cp	r22, r20
 224:	75 07       	cpc	r23, r21
 226:	b0 f3       	brcs	.-20     	; 0x214 <Stepper_Position+0x90>
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
